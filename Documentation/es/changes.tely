\input texinfo @c -*- coding: utf-8; mode: texinfo; documentlanguage: es -*-
@ignore
    Translation of GIT committish: 714ec3008267aa3abd4f3bfb05da7eede2eb4e27

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore
@setfilename lilypond-changes.info
@settitle Registro de cambios de LilyPond

@include macros.itexi

@ifhtml
@macro inputfileref{DIR,NAME}
@uref{../../\DIR\/collated-files.html#\NAME\,@file{\DIR\/\NAME\}}@c
@end macro
@macro usermanref{NAME}
@inforef{\NAME\,,../user/lilypond/lilypond}@c
@end macro
@end ifhtml

@ifnothtml
@macro inputfileref{DIR,NAME}
@file{\DIR\/\NAME\}@c
@end macro
@macro usermanref{NAME}
Véase el manual del usuario, \NAME\
@end macro
@end ifnothtml

@macro textanchor{NAME}
@html
<a name="\NAME\"></a>
@end html
@end macro


@documentencoding UTF-8
@documentlanguage es
@afourpaper
@c Translators: Francisco Vila

@finalout

@node Top
@top Funcionalidades nuevas de la versión 2.18 desde la 2.16

@allowcodebreaks false

@itemize

@ignore

HINTS

* add new items at the top

* only show verbatim input for syntax/input changes

* try to be as brief possible in those cases

* don't try to provide real-world examples, they often get too big,
which scares away people.

* Write complete sentences.

* only show user-visible changes.

@end ignore

@item
Pueden colocarse dentro de una sola variable, o ser devueltas por
una función de evento, varias articulaciones:

@lilypond[verbatim,quote]
sempreStacc = -. ^\markup \italic sempre
\relative { c''4\sempreStacc c c c }
@end lilypond

@item
La línea de base de los elementos de marcado que constituyen
partituras se toma actualmente del punto de referencia
(normalmente la línea central del pentagrama) del primer sistema
de la parte inferior, en lugar de la parte superior del rectángulo
circundante. Lo siguente
@lilypond[verbatim,quote]
\markup {
  violin: \score { \new Staff { <g d' a' e''>1 }
                   \layout { indent=0 } } ,
  cello: \score { \new Staff { \clef "bass" <c, g, d a> }
                  \layout { indent=0 } }
}
@end lilypond
tenía anteriormente el siguiente aspecto:
@lilypond[quote]
\markup {
  violin: \general-align #Y #UP
          \score { \new Staff { <g d' a' e''>1 }
                   \layout { indent=0 } } ,
  cello:  \general-align #Y #UP
          \score { \new Staff { \clef "bass" <c, g, d a> }
                  \layout { indent=0 } }
}
@end lilypond
sin que hubiera una manera adecuada de hacer que las dos
partituras estuviesen alineadas.

@item
LilyPond ya no deduce automáticamente un contexto
@samp{\defaultchild} dentro de una definición de contexto con
cláusulas @samp{\accepts}.  Cualquier definición de contexto que
no tenga una definición @samp{\defaultchild} explícita o heredada,
cuenta como un contexto @samp{Bottom} y es candidato para eventos
de duraciones y sobreescrituras sin causar la creación implícita
de otros contextos.  Asegúrese de especificar un
@samp{\defaultchild} para contextos no-@samp{Bottom} al definirlos
partiendo de cero.

@item
Ahora están ampliamente contemplados los símbolos de registros de
acordeón tanto para discanto como bajo en el módulo @samp{scm accreg},
véase @ruser{Accordion Registers}.
@lilypond[verbatim,quote]
#(use-modules (scm accreg))
\new PianoStaff
<<
  \new Staff \relative
  { \clef "treble"  \discant "10"
    r8 s32 f'[ bes f] s e[ a e] s d[ g d] s16 e32[ a]
    \discant "121"
    << { r16 <f bes> r <e a> r <d g> } \\
       { d r a r bes r } >> |
    <cis e a>1
  }
  \new Staff \relative
  { \clef "treble"  \freeBass "1"
    r8 d'32 s16. c32 s16. bes32 s16. a32[ cis] s16
    \clef "bass"  \stdBass "Master"
    << { r16 <f, bes d>^"b" r <e a c>^"am" r <d g bes>^"gm" |
         <e a cis>1^"a" } \\
       { d8_"D" c_"C" bes_"B" | a1_"A" }
    >>
  }
>>
@end lilypond

@item
Las nuevas instrucciones @code{markLengthOn} y
@code{markLengthOff} controlan si se permite la existencia de un
espacio horizontal para las letras de ensayo e indicaciones de
tempo.

@lilypond[quote,relative=2]
\markLengthOn
\compressFullBarRests
\tempo "Molto vivace" c2 c'
\mark\default
\tempo "Meno mosso" R1*16
\mark\default
g,2 g
\bar "||"
\markLengthOff
\tempo "Molto vivace" c2 c'
\mark#1
\tempo "Meno mosso" R1*16
\mark\default
g,2 g
@end lilypond

@item
Ahora las letras de ensayo al principio de una línea se sitúan de
forma predeterminada a la derecha de la clave y la armadura. Como
en versiones anteriores, la interfaz
@code{break-alignable-interface} controla el comportamiento.

@lilypond[quote,relative=2]
\set Score.barNumberVisibility = #all-bar-numbers-visible
\set Timing.currentBarNumber = #72
\bar"||" \time 3/4 \key e\major \mark#10 \tempo "Adagio" b2.
@end lilypond

@item
Ahora se pueden escribir directamente números decimales dentro de
la música, sin el prefijo del símbolo de almohadilla.  Junto al
cambio anterior en la forma de especificar las propiedades de los
objetos, el código para modificar la longitud de las plicas ha
cambiado de esto:
@example
\override Stem #'length = #5.6
e' f' g' a'
@end example
a esto:
@example
\override Stem.length = 5.6
e' f' g' a'
@end example

Se debe escribir un dígito a ambos lados del punto; no se permiten
valores como @code{4.} ó @code{-.3}.

Asimismo, no se admiten fracciones decimales dentro de
@code{\chordmode}.

@item
Se pueden redefinir libremente ciertas abreviaturas como @code{(},
@code{)}, @code{|}, @code{[}, @code{]}, @code{~}, @code{\(},
@code{\)} y otras, como instrucciones normales. Un ejemplo sería
@lilypond[verbatim,quote]
"\\{" = (
"\\}" = )
"(" = \melisma
")" = \melismaEnd

\new Staff <<
  \relative c' {
    c8 \{ d e f \} % slurred
    g ( a b c ) % no slur, but with melisma
    c,1 \bar "|."
   }
   \addlyrics { Li -- ly -- pond. }
>>
@end lilypond

@item
El nombre de la abreviatura de articulación para
@code{\staccatissimo} ha cambiado de @code{-|} a@tie{}@code{-!}.

@item
Ahora se escriben los rangos de cambios de tempo como @code{\tempo
4 = 60 - 68} en lugar de @code{\tempo 4 = 60 ~ 68}.

@item
Se ha cambiado el nombre de @code{OctavateEight} por el de
@code{ClefModifier}.  Las propiedades de contexto relacionadas han
cambiado su nombre @code{xxxOctavationyyy} por el de
@code{xxxTranspositionyyy}.

@item
Existe una nueva instrucción @code{\absolute} que marca
explícitamente la música introducida en alturas absolutas.  Aunque
esto era antes el comportamiento predeterminado, una instrucción
@code{\absolute} explícita evita también la reinterpretación
cuando el pasaje está dentro de un bloque marcado como
@code{\relative}:
@lilypond[verbatim,quote]
\relative c { c'4 \absolute { f'' g'' } c }
@end lilypond

@item
Cuando se utiliza @code{\relative} sin emplear como referencia una
altura explícita, se toma como referencia el centro de la primera
octava, haciendo que no se pueda distinguir si la primera nota que
se introduce es relativa o absoluta.  Anteriormente, la omisión de
una altura de referencia habría llevado a una altura
predeterminada de @code{c'} (el Do central).  Dado que la
mencionada elección es, hasta cierto punto, arbitraria, la forma
de uso recomendada es que se especifique siempre una altura de
referencia.

@item
Se puede usar la nueva instrucción @code{\single} para convertir
la sobreescritura de una propiedad en un truco que se aplica a una
expresión musical única:

@lilypond[quote,verbatim,relative=2]
<a \single\voiceTwoStyle e' a>1
@end lilypond

@item
Dos maneras de hacer que los objetos gráficos no aparezcan en la
salida son: sobreescribir su propiedad @code{transparent} con un
valor verdadero @code{#t} (reteniendo el espaciado original), o
sobreescribiendo su propiedad @code{stencil} o sello con un valor
falso @code{#f} (que no ocupa ningún espacio).  Estas dos
operaciones tienen ahora las formas cortas @code{\hide} (ocultar)
y @code{\omit} (omitir), respectivamente.  A estas instrucciones
puede dárseles una expresión musical sobre la que efectuar el
trucaje, o bien el nombre de un objeto gráfico para el que se debe
crear la sobreescritura (para especificar los dos, utilice
@code{\single} sobre la instrucción en forma de sobreescritura):

@lilypond[quote,verbatim]
\new Staff \with { \omit Clef }
\relative c'' <a e' \hide a>1
@end lilypond

@item
Se puede aplicar la nueva instrucción @code{\temporary} a las
sobreescrituras para hacer que no sustituyan a los ajustes de
propiedad previos.  Si se aplica una instrucción de reversión
@code{\revert} a la misma propiedad varias veces seguidas, el
ajuste anterior reaparece:

@lilypond[quote,verbatim,relative=2]
\override NoteHead.color = #red c4
\override NoteHead.color = #green d
\revert NoteHead.color e2
\override NoteHead.color = #red c4
\temporary\override NoteHead.color = #green d
\revert NoteHead.color e
\revert NoteHead.color c
@end lilypond

Esto tiene utilidad principalmente para la escritura de funciones
musicales que se desea que tengan alguna propiedad modificada
solamente por un tiempo igual a la duración de la función.

@item
Las instrucciones @code{\tag}, @code{\removeWithTag} y
@code{\keepWithTag} ahora admiten una lista de símbolos en lugar
de un solo símbolo para marcar, eliminar y seleccionar música que
esté etiquetada con una cualquiera de la lista de etiquetas.  Esto
es de especial importancia para @code{\keepWithTag} porque no es
posible conseguir el mismo efecto usando varias instrucciones
@code{\keepWithTag} consecutivas.

@item
La opción @samp{-d old-relative} se ha eliminado.  Ya no está
accesible a través de la línea de órdenes; la utilidad que aún
conservaba era la interpretación de @code{\relative} en archivos
de LilyPond convertidos automáticamente de las versiones@tie{}1.8
o anteriores.  No está claro cuántas de tales versiones estaban
aún en funcionamiento.

@item
Se ha invertido el significado de @code{instrumentTransposition}.
Después de
@example
\set instrumentTransposition = #@{ b #@}
@end example
una nota escrita @code{c'} ahora suena como @code{b}.
Anteriormente era a la inversa.  Esperamos que este cambio y el
siguiente hagan más sencillo el tratamiento de los instrumentos
transpositores.

@item
La música generada por las instrucciones @code{\set} y
@code{\override} ya no resulta afectada por la instrucción
@code{\transpose}.  La consecuencia más importante es que
@code{\transpose} transporta la altura tonal sonora o de concierto
y la que se imprime en la misma medida incluso aunque la música
que se transporta contenga @code{\transposition}.  Anteriormente,
@example
\transpose c' f' \transposition bes'
@end example
era equivalente a @code{\transposition f'}.  Ahora se mantiene
como equivalente a @code{\transposition bes'}.

@item
Cuando se comprueba la existencia de colisiones, LilyPond ya no
trata los objetos como rectángulos.  En lugar de ello se aproxima
la forma verdadera de los objetos utilizando un enfoque parecido
al uso de integrales, lo que por lo común dará como resultado un
posicionamiento más ceñido y regular de los objetos y los sistemas
de pentagramas:

@lilypond[relative=1]
#(ly:set-option 'debug-skylines #t)
\dynamicUp
c'4\f a4\f d\f( f)
a,4\< c c c\!
d4-.\downbow a4^"r'venu..." c \tempo "T1" e
@end lilypond

El fragmento anterior tenía anteriormente este aspecto:

@lilypond[relative=1]
#(ly:set-option 'debug-skylines #t)
\override Hairpin #'vertical-skylines = #'()
\override DynamicText #'vertical-skylines = #'()
\override TextScript #'vertical-skylines = #'()
\override Score.MetronomeMark #'vertical-skylines = #'()
\override Staff.Clef #'vertical-skylines = #'()
\dynamicUp
c'4\f a4\f d\f( f)
a,4\< c c c\!
d4-.\downbow a4^"r'venu..." c \tempo "T1" e
@end lilypond

Entre los objetos afectados se encuentran @code{Accidentals},
@code{Beams}, @code{Clefs}, @code{Dynamics}, @code{FiguredBass},
@code{Flags}, @code{Glissandos}, @code{Lyrics},
@code{MetronomeMarks}, @code{OttavaBrackets}, @code{Pedals},
@code{RehearsalMarks}, @code{Rests}, @code{Scripts},
@code{TextScripts}, @code{Ties}, @code{Tuplets} y
@code{VoltaBrackets}.

@item
Ahora los grupos de valoración especial se crean mediante la
instrucción @code{\tuplet}, que toma una fracción
@code{@var{t}/@var{n}} para especificar que se tocan @var{t} notas
en el tiempo en que habitualmente se permite un número de
@var{n}. Una sola instrucción @code{\tuplet} puede crear varios
grupos especiales si su duración se inserta después de la
fracción.
@lilypond[quote,verbatim,relative=2]
\tuplet 3/2 { c8 d e } \tuplet 3/2 { f e d } c2
\tuplet 3/2 4 { c8 d e f e d } c2
@end lilypond
La instrucción @code{\times} con el orden de la fracción invertido
@code{@var{n}/@var{t}} aún está disponible.

@item
Se introducen dos instrucciones nuevas de marcado:
@code{\draw-dashed-line} (trazar línea discontinua) y
@code{\draw-dotted-line} (trazar línea de puntos).

@noindent
La línea discontinua se extiende sobre toda la longitud dada por
@var{destino}, si @code{full-length} está establecido al valor
@code{#t} (que es lo predeterminado) sin ningún espacio al
principio ni al final.  Entonces, @code{final} se altera de forma
que quepa.  Para insistir en los valores dados (o predeterminados)
para @code{inicio} y @code{final} utilice @code{\override
#'(full-length . #f)}.  Son posibles ajustes manuales para
@code{inicio}, @code{final} y @code{fase}.

@noindent
La línea d puntos siempre se extiende a la longitud completa dada
por @var{destino}, sin ningún espacio al principio ni al final.
Es posible ajustar manualmente @code{final} para obtener espacios
mayores o menores entre los puntos.  El valor dado (o
predeterminado) de @code{final} se altera de forma que corresponda
a la longitud de la línea, @code{line-length}.

@lilypond[verbatim,quote]
\markup {
  \draw-dashed-line #'(5.1 . 2.3)
  \override #'(on . 0.3)
  \override #'(off . 0.5)
  \draw-dashed-line #'(5.1 . 2.3)
  \draw-dotted-line #'(5.1 . 2.3)
  \override #'(thickness . 2)
  \override #'(off . 0.2)
  \draw-dotted-line #'(5.1 . 2.3)
}
@end lilypond

@item
A partir de la versión@tie{}2.17.10, los mensajes de error o la
@acronym{URI} de @code{textedit} que se usa para la funcionalidad
«apuntar y pulsar» especifican los números de columna empezando
en@tie{}1 en vez de en@tie{}0.  El desplazamiento de bytes (que
también forma parte de las @acronym{URI}s de @code{textedit}) aún
comienza en@tie{}0.

@item
La instrucción @code{\clef} contempla una transposición opcional:
@lilypond[verbatim,quote,relative=1]
\clef "treble_(8)"
c2 c
\clef "bass^[15]"
c2 c
@end lilypond

@item
Se ha hecho que la sintaxis de LilyPond de palabras separadas por
puntos @code{Voice.Accidental} sea intercambiable con
@code{#'(Voice Accidental)}, una lista de Scheme de símbolos.
Como resultado, código del estilo de
@example
\override Voice.TextSpanner #'(bound-details left text) = "rit."
@end example
ahora es equivalente a
@example
\override Voice.TextSpanner bound-details.left.text = "rit."
@end example
o incluso a
@example
\override #'(Voice TextSpanner) bound-details.left.text = "rit."
@end example

@item
La ruta a un grob y a una propiedad de un grob ya no requieren que
se especifiquen como dos argumentos distintos a instrucciones como
@samp{\override} y @code{\revert}, permitiendo la sintaxis
siguiente:
@example
\override Voice.TextSpanner.bound-details.left.text = "rit."
@end example
Dado que las funciones musicales complementarias como
@samp{\overrideProperty} no contemplan formas con y sin espacios
de separación al mismo tiempo, la utillización de una sola ruta
con puntos es ahora la forma de preferencia.  La especificación
separada de la ruta de un grob y de la propiedad del grob,
contemplada aún por parte de @samp{\override} y de @samp{\revert}
por motivos de compatibilidad, se considera ahora obsoleta.

@item
Debido a que dos palabras se aceptan ahora como símbolos que son
argumentos de función, las interfaces de @samp{\accidentalStyle},
@samp{\alterBroken}, @samp{\footnote} y @samp{\tweak} han tenido
que ser rediseñadas allí donde estaban implicados símbolos que
eran argumentos opcionales.  Compruebe la documentación de la
función respectiva para ver los detalles.

@item
Varias instrucciones aceptan ahora listas de símbolos
(introducidas convenientemente como palabras separadas por puntos)
para diversos tipos de argumentos.  Entre ellos se encuentran
@samp{\accidentalStyle}, @samp{\alterBroken}, @samp{\footnote},
@samp{\hide}, @samp{\omit}, @samp{\overrideProperty},
@samp{\shape} y @samp{\tweak}.

@item
Se ha modificado la interfaz de usuario de las líneas divisorias.
Los glifos de barra de compás ahora se asemejan al aspecto de los
caracteres utilizados para expresar el tipo de barra, de manera
que un signo de repetición por la izquierda se debe codificar como
@code{.|:}.  La instrucción @code{\defineBarLine} provee una
manera sencilla de definir estilos adicionales de línea divisoria.

@item
Las alteraciones accidentales en la armadura de la tonalidad se
pueden imprimir en distinta octava de las posiciones
tradicionales, o en más de una octava.
@lilypond[quote,relative=0]
\override Staff.KeySignature #'flat-positions = #'((-5 . 5))
\override Staff.KeyCancellation #'flat-positions = #'((-5 . 5))
\clef bass \key es \major es g bes d
\clef treble \bar "||" \key es \major es g bes d
\override Staff.KeySignature #'sharp-positions = #'(2)
\bar "||" \key d \major b fis b2
@end lilypond

@end itemize

@ifhtml
Para ver noticias anteriores, diríjase a
@uref{http://lilypond.org/doc/v2.16/Documentation/changes/},
@uref{http://lilypond.org/doc/v2.14/Documentation/changes/},
o @uref{../,vuelva} al índice de la documentación.


@end ifhtml

@bye
