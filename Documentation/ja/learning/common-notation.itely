@c -*- coding: utf-8; mode: texinfo; documentlanguage: ja -*-

@ignore
    Translation of GIT committish: c1b0482f63f881bd3f67845e5f76a3e04675ef2a

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c \version "2.19.2"

@ignore
Tutorial guidelines:  (different from policy.txt!)
- unless you have a really good reason, use either
    @lilypond[verbatim,quote]
  or
    @lilypond[verbatim,quote,relative=2]

  Don't use any other relative=X commands.

- use "aes" and "ees" instead of "as" and "es".  I know it's not
  correct Dutch naming, but let's not confuse people with this
  until we get to the Basic notation chapter.

- Add "Music Glossary: @rglos{foo}" to the *top* of the relevant
  portions of the tutorial.

@end ignore


@c Translators: Yoshiki Sawada
@c Translation status: post-GDP


@node 一般的な記譜法
@chapter 一般的な記譜法
@translationof Common notation

このチュートリアルではまず LilyPond 音楽言語についての紹介を行い、@c
楽譜を作り出す方法について説明します。@c
LilyPond との最初の接触の後、我々は一般的な音楽記譜法を持つ楽譜を@c
作成する方法について説明します。

@menu
* 単一譜表表記::
* 同時に演奏する複数の音符::
* 歌曲::
* 仕上げ::
@end menu


@node 単一譜表表記
@section 単一譜表表記
@translationof Single staff notation

このセクションはでは 1 つの譜表の上にある 1 つの声部のために使用される@c
一般的な記譜法を紹介します。

@menu
* 小節チェック::
* 臨時記号と調号::
* タイとスラー::
* アーティキュレーションと強弱記号::
* テキストを追加する::
* 自動連桁と手動連桁::
* 高度なリズム コマンド::
@end menu


@node 小節チェック
@subsection 小節チェック
@translationof Bar checks

必須ではありませんが、入力コードの中で @emph{小節チェック} を挿入して@c
どこに小節線を置こうとしているのかを示すべきです。@c
小節チェックは挿入するには @code{|} を入力します。@c
小節チェックがあると、プログラムはあなたが各小節に入力した演奏時間が@c
正しい長さになっているかを検証することができます。@c
さらに、小節チェックは要素を整理する助けとなるため、
入力コードが読みやすくなります。

@lilypond[verbatim,quote,relative=2]
g1 | e1 | c2. c'4 | g4 c g e | c4 r r2 |
@end lilypond

@seealso
記譜法リファレンス:
@ruser{小節と小節番号のチェック}


@node 臨時記号と調号
@subsection 臨時記号と調号
@translationof Accidentals and key signatures

@warning{新しいユーザ、特に音楽理論に馴染みのないユーザは@c
しばしばこれらのことで混乱します
-- このページの最後にある警告を呼んでください！}

@subheading 臨時記号

@cindex accidentals (臨時記号)
@cindex accidentals and key signatures (臨時記号と調号)
@cindex sharp (シャープ)
@cindex double sharp (ダブル シャープ)
@cindex sharp, double (ダブル シャープ)
@cindex flat (フラット)
@cindex double flat (ダブル フラット)
@cindex flat, double (ダブル フラット)

@funindex es
@funindex is
@funindex eses
@funindex isis

音楽用語集: @rglos{sharp}, @rglos{flat}, @rglos{double sharp},
@rglos{double flat}, @rglos{accidental}
@c シャープ (sharp), フラット (flat), ダブル シャープ (double sharp),
@c ダブル フラット (double flat), 臨時記号 (accidental)

@notation{シャープ} は音符名に @code{is} を付け加えることによって作られ、@c
@notation{フラット} は @code{es} を付け加えることによって作られます。@c
予想しているかもしれませんが、@notation{ダブル シャープ} や@c
@notation{ダブル フラット} は @code{isis} や @code{eses} を@c
付け加えることによって作られます。@c
この構文はドイツ語やオランダ語のような北欧とドイツの言語@c
での命名規則から生まれました。
@notation{臨時記号} に対して他の名前を使うには、@c
@ruser{他の言語での音符名} を参照してください。

@lilypond[verbatim,quote,relative=2]
cis1 ees fisis, aeses
@end lilypond


@cindex key signature, setting
@subheading 調号
@c 調号

@cindex key signature (調号)
@cindex major (メジャー)
@cindex minor (マイナー)
@cindex accidentals and key signature (臨時記号と調号)
@cindex content vs. layout (内容 vs. レイアウト)
@cindex layout vs. content (レイアウト vs. 内容)

@funindex \key
@funindex key
@funindex \major
@funindex major
@funindex \minor
@funindex minor

音楽用語集: @rglos{key signature}, @rglos{major}, @rglos{minor}

@notation{調号} はコマンド @code{\key} とそれに続くピッチと
@code{\major} または @code{\minor} によってセットされます。

@lilypond[verbatim,quote,relative=2]
\key d \major
a1
\key c \minor
a
@end lilypond

@smallspace


@subheading 警告: 調号とピッチ

音楽用語集: @rglos{accidental}, @rglos{key signature},
@rglos{pitch}, @rglos{flat}, @rglos{natural}, @rglos{sharp},
@rglos{transposition}

@notation{臨時記号} を譜刻するかどうかを決定するために LilyPond はピッチと
@notation{調号} を検証します。@c
調号は @emph{譜刻される} 臨時記号にだけ影響を与え、@c
音符の @notation{ピッチ} には影響を与えません！@c
この特徴はしばしば新しく LilyPond を始める人を混乱させるため、@c
より詳細に説明します。

LilyPond は音楽の内容とレイアウトを峻別します。@c
音符の変更記号 (@notation{フラット}、@notation{ナチュラル}、@c
@notation{シャープ}) はピッチの一部であるため、音楽の内容です。@c
臨時記号 (@emph{譜刻される}フラット、ナチュラル、シャープ記号) が@c
対応する音符の前に譜刻されるかどうかはレイアウトの問題です。@c
レイアウトは規則に従う何らかのものであるため、@c
臨時記号はそれらの規則に対応して自動的に譜刻されます。@c
あなたの音楽の中でのピッチは人工的な仕掛けであるため、@c
それらは自動的には追加されず、あなたはあなたの聞きたいピッチを@c
入力しなければなりません。

以下の例では:

@lilypond[verbatim,quote,relative=2]
\key d \major
cis4 d e fis
@end lilypond

@noindent
臨時記号を譜刻されている音符はありません。@c
しかしながら、あなたは入力ファイルで @code{is} を付け加えて @code{cis} や
@code{fis} などとタイプしなければなりません。

コード @code{b} は @qq{譜表の最初の線 (一番上の線) のすぐ下に黒い点を譜刻せよ}
という意味ではありません。@c
そうではなく、@qq{ピッチが B ナチュラルである音符がある} という意味です。@c
A フラット メジャーの調では、@code{b} には臨時記号が付きます:

@lilypond[verbatim,quote,relative=2]
\key aes \major
aes4 c b c
@end lilypond

混乱してしまいましたか？@c
以下のように考えてみてください:
あなたがピアノを弾いているとします。@c
黒鍵を押したいのであれば、音符名に @w{@code{-is}} や @w{@code{-es}}
を付ける必要があるのです！

すべての変化を明示的に付け加えることは入力時にちょっとした努力を@c
要するかもしれません。@c
しかしながら、移調がより容易になる、異なる規約に対応して臨時記号を@c
譜刻できるという利点があります。@c
臨時記号がどのように異なる規則に対応して譜刻されるのかについての@c
いくつかの例は、@ruser{自動臨時記号} を参照してください。
@c 臨時記号の自動譜刻

@seealso
記譜法リファレンス: @ruser{他の言語での音符名},
@ruser{臨時記号},
@ruser{自動臨時記号},
@ruser{調号}


@node タイとスラー
@subsection タイとスラー
@translationof Ties and slurs

@cindex tie (タイ)
@cindex slur (スラー)
@cindex slur, phrasing (フレージング スラー)
@cindex phrasing slur (フレージング スラー)

@funindex ~
@funindex ( ... )
@funindex \( ... \)


@subheading タイ


音楽用語集: @rglos{tie}

@notation{タイ}はタイが始まる最初の音符にチルド @code{~} を@c
付加することによって作成されます。

@lilypond[verbatim,quote,relative=2]
g4~ 4 c2~ | 4~ 8 a~ 2 |
@end lilypond


@subheading スラー

音楽用語集: @rglos{slur}

@notation{スラー}は多くの音符に亘って描かれる曲線です。@c
スラーの開始音符と終了音符にはそれぞれ @code{(} と @code{)} を付加します。

@lilypond[verbatim,quote,relative=2]
d4( c16) cis( d e c cis d) e( d4)
@end lilypond


@subheading フレージング スラー

音楽用語集: @rglos{slur}, @rglos{phrasing}

長い @notation{フレーズ} を示すためのスラーは @code{\(} と @code{\)}
によって挿入することができます。@c
あなたは@notation{スラー}とフレージング スラーを重ねることができます。@c
しかしながら、あなたは複数のスラーを重ねたり、複数のフレージング スラーを@c
重ねることはできません。

@lilypond[verbatim,quote,relative=2]
g4\( g8( a) b( c) b4\)
@end lilypond

@smallspace

@cindex slurs versus ties (スラー vs. タイ)
@subheading 警告: スラー vs. タイ

音楽用語集: @rglos{articulation}, @rglos{slur}, @rglos{tie}

@notation{スラー} は @notation{タイ} のように見えますが、意味が異なります。@c
タイは単純に最初の音符をより長くするものであり、@c
同じ音程の音符のペアに対してのみ使用することができます。@c
スラーは複数の音符による @notation{アーティキュレーション} (節、表現) を@c
表していて、より大きな音符のグループに対して使用することができます。@c
スラーとタイはネストさせることができます。

@lilypond[verbatim,quote,relative=2]
c4~( c8 d~ 4 e)
@end lilypond

@seealso
記譜法リファレンス:
@ruser{タイ},
@ruser{スラー},
@ruser{フレージング スラー}


@node アーティキュレーションと強弱記号
@subsection アーティキュレーションと強弱記号
@translationof Articulation and dynamics


@subheading アーティキュレーション

@cindex articulation (アーティキュレーション)
@cindex accent (アクセント)
@cindex staccato (スタッカート)

音楽用語集: @rglos{articulation}

一般的な @notation{アーティキュレーション} はダッシュ @code{-} と単一文字を@c
使うことで音符に付け加えることができます:

@lilypond[verbatim,quote,relative=2]
c4-^ c-+ c-- c-!
c4-> c-. c2-_
@end lilypond


@subheading 運指法記号

@cindex fingering (運指法記号)

@funindex ^
@funindex _

音楽用語集: @rglos{fingering}

同様に、@notation{運指法} はダッシュ (@code{-}) と譜刻する数字を使うことで@c
音符に付け加えることができます:

@lilypond[verbatim,quote,relative=2]
c-3 e-5 b-2 a-1
@end lilypond

通常、アーティキュレーションと運指法は自動的に譜刻されます。@c
しかしながら、あなたはダッシュ (@code{-}) を @code{^} (上へ) または
@code{_} (下へ) に置き換えることによって方向を指定することができます。@c
さらに、あなたは同じ音符に複数のアーティキュレーションを@c
使用することもできます。@c
しかしながらたいていの場合は、LilyPond にアーティキュレーションの方向を@c
決定させるのが一番です。

@lilypond[verbatim,quote,relative=2]
c4_-^1 d^. f^4_2-> e^-_+
@end lilypond


@subheading 強弱記号

@cindex dynamics (強弱記号)
@cindex decrescendo (デクレッシェンド)
@cindex crescendo (クレッシェンド)

@funindex \f
@funindex \ff
@funindex \mp
@funindex \p
@funindex \mf
@funindex \pp
@funindex \<
@funindex <
@funindex \>
@funindex >
@funindex \!
@funindex !

音楽用語集: @rglos{dynamics}, @rglos{crescendo}
@rglos{decrescendo}

@notation{強弱記号} は音符にバック スラッシュ@c
@ignore
(訳者注: バック スラッシュは英語フォントではスラッシュ @code{/} を@c
左右反転させたもの、日本語フォントでは円マーク
@code{￥} になるのが一般的です。)
@end ignore
付きのマークを付け加えることによって作成されます:

@lilypond[verbatim,quote,relative=2]
c4\ff c\mf c\p c\pp
@end lilypond

@notation{クレッシェンド} と @notation{デクレッシェンド} はコマンド @code{\<} と
@code{\>} によって開始されます。@c
次の強弱記号 -- 例えば、@code{\f} -- が (デ)クレッシェンドを終わらせます。@c
コマンド @code{\!} を使って終わらせることもできます:

@lilypond[verbatim,quote,relative=2]
c4\< c\ff\> c c\!
@end lilypond


@seealso
記譜法リファレンス:
@ruser{アーティキュレーションと装飾},
@ruser{運指の指示},
@ruser{強弱記号}


@node テキストを追加する
@subsection テキストを追加する
@translationof Adding text

@cindex text, adding (テキストを追加する)
@cindex adding text (テキストを追加する)
@cindex markup (マークアップ)

@funindex \markup
@funindex markup

テキストをあなたの楽譜に追加することができます:

@lilypond[verbatim,quote,relative=2]
c2^"espr" a_"legato"
@end lilypond

追加のフォーマット指定を @code{\markup} コマンドで追加することができます:

@lilypond[verbatim,quote,relative=2]
c2^\markup { \bold espr }
a2_\markup {
  \dynamic f \italic \small { 2nd } \hspace #0.1 \dynamic p
}
@end lilypond


@seealso
記譜法リファレンス:
@ruser{テキストを記述する}


@node 自動連桁と手動連桁
@subsection 自動連桁と手動連桁
@translationof Automatic and manual beams

@cindex beaming (連桁を付ける)
@cindex automatic beams (自動連桁)
@cindex manual beams (手動連桁)
@cindex beams, automatic (自動連桁)
@cindex beams, manual (手動連桁)
@cindex beams, by hand (手動による連桁)

@funindex [ ... ]
@funindex [
@funindex ]
@funindex \autoBeamOff
@funindex autoBeamOff
@funindex \autoBeamOn
@funindex autoBeamOn

音楽用語集: @rglos{beam}

すべての @notation{連桁} は自動的に描かれます:

@lilypond[verbatim,quote,relative=2]
a8 ais d ees r d c16 b a8
@end lilypond

あなたが自動連桁を好まない場合、手動で上書きすることもできます。@c
ある箇所の連桁を修正するには、連桁を付ける最初の音符に @code{[} を、@c
最後の音符に @code{]} を付け加えます。

@lilypond[verbatim,quote,relative=2]
a8[ ais] d[ ees r d] c16 b a8
@end lilypond

もしあなたが楽譜全体あるいは一部で自動連桁を Off にしたいのなら、@c
自動連桁を Off にするにはコマンド @code{\autoBeamOff} を、@c
再度自動連桁を On にするには @code{\autoBeamOn} を使用します。

@lilypond[verbatim,quote,relative=2]
\autoBeamOff
a8 c b4 d8. c16 b4 |
\autoBeamOn
a8 c b4 d8. c16 b4 |
@end lilypond


@seealso
記譜法リファレンス:
@ruser{自動連桁},
@ruser{手動連桁}


@node 高度なリズム コマンド
@subsection 高度なリズム コマンド
@translationof Advanced rhythmic commands

@subheading 部分小節

@cindex pickup (ピックアップ)
@cindex anacrusis (弱拍)
@cindex partial measure (部分小節)

@funindex \partial
@funindex partial

音楽用語集: @rglos{anacrusis}

ピックアップ (訳者: 本来の拍子以外の拍子を持つ小節のこと)
(または@notation{弱拍}) はキーワード @code{\partial} によって挿入されます。@c
この後に演奏時間が続きます:
@code{\partial 4} は 4 分音符のピックアップであり、@c
@code{\partial 8} は 8 分音符のピックアップです。

@lilypond[verbatim,quote,relative=2]
\partial 8 f8 |
c2 d |
@end lilypond


@subheading 連符

@cindex tuplets (連符)
@cindex triplets (3 連符)

@funindex \tuplet
@funindex tuplet

音楽用語集: @rglos{note value}, @rglos{triplet}

@notation{連符} は @code{\tuplet} キーワードによって作成されます。@c
これは 2 つの引数をとります: 分数と楽譜の断片です。@c
分数の分母は通常の音符の数で、分子は連符の音符の数です。@c
3 連符は 2 つの音符の代わりに 3 つの音符を演奏しますので、@notation{連符}
の分数は 3/2 となります。

@lilypond[verbatim,quote,relative=2]
\tuplet 3/2 { f8 g a }
\tuplet 3/2 { c8 r c }
\tuplet 3/2 { f,8 g16[ a g a] }
\tuplet 3/2 { d4 a8 }
@end lilypond


@subheading 装飾小音符

@cindex grace notes (装飾小音符)
@cindex acciaccatura (短前打音)
@cindex appoggiatura (前打音)

@funindex \grace
@funindex grace
@funindex \acciaccatura
@funindex acciaccatura
@funindex \appoggiatura
@funindex acciaccatura

音楽用語集: @rglos{grace notes}, @rglos{acciaccatura},
@rglos{appoggiatura}

@notation{装飾小音符} は @code{\grace} コマンドによって作成されますが、@c
キーワード @code{\appoggiatura} や @code{\acciaccatura} による接頭音楽表記に@c
よっても作成されます:

@lilypond[verbatim,quote,relative=2]
c2 \grace { a32 b } c2 |
c2 \appoggiatura b16 c2 |
c2 \acciaccatura b16 c2 |
@end lilypond


@seealso
記譜法リファレンス:
@ruser{装飾小音符},
@ruser{連符},
@ruser{上拍}


@node 同時に演奏する複数の音符
@section 同時に演奏する複数の音符
@translationof Multiple notes at once

このセクションでは同時に複数の音符
 -- 複数の楽器、単一の楽器に対する複数の譜 (すなわちピアノ)、和音 --
を持つ方法について紹介します。

楽譜の中での多声は楽曲の中にある複数の声部を参照します。@c
LilyPond の中での多声は同じ譜表上にある複数の声部を参照します。

@menu
* 音楽表記についての説明::
* 複数の譜::
* 譜表グループ::
* 音符を組み合わせて和音にする::
* 単一譜表での多声::
@end menu


@node 音楽表記についての説明
@subsection 音楽表記についての説明
@translationof Music expressions explained

@cindex music expression (音楽表記)
@cindex expression, music (音楽表記)
@cindex compound music expression (複合音楽表記)
@cindex music expression, compound (複合音楽表記)

LilyPond 入力ファイルの中では、音楽は @notation{音楽表記} によって表されます。@c
単一の音符は 1 つの音楽表記になります:

@lilypond[verbatim,quote,relative=2]
a4
@end lilypond

表記を波括弧で括ることによって @emph{複合音楽表記} が作成されます。@c
2 つの音符を持つ複合音楽表記を作成しました:

@lilypond[verbatim,quote,relative=2]
{ a4 g4 }
@end lilypond

波括弧の中にある音楽表記 (例えば、いくつかの音符) のグループはそれらが@c
シークエンスであるということを意味しています
(つまり、それぞれの音符は前の音符に続くということです)。@c
もう 1 つ音楽表記の結果を示します:

@lilypond[verbatim,quote,relative=2]
{ { a4 g } f4 g }
@end lilypond


@subheading 数学的表記との類似
@c Analogy: mathematical expressions

このメカニズムは数学式と似ています:
大きな式は小さな式を組み合わせることによって作成されます。@c
そのような式は表記と呼ばれ、それらの定義は再帰的なのであなたは@c
任意に複雑で大きな表記を作ることができます。@c
例えば、

@example
1

1 + 2

(1 + 2) * 3

((1 + 2) * 3) / (4 * 5)
@end example

これは表記のシークエンスであり、@c
各表記は次の (より大きな) 表記に組み込まれています。@c
最も単純な表記は数であり、より大きな表記は演算子 (@code{+}, @code{*},
@code{/} など) と括弧を組み合わせることによって作成されます。@c
数学式と同様に、音楽表記も任意の深さにネストさせることができ、@c
それは多声楽譜のような複雑な音楽のために必要なことです。


@subheading 同時進行の音楽表記: 複数の譜
@c Simultaneous music expressions: multiple staves

@cindex multiple staves (複数の譜)
@cindex staves, multiple (複数の譜)
@cindex polyphony (多声)
@cindex combining expressions in parallel (表記を並列に組み合わせる)
@cindex parallel expressions (並列表記)
@cindex expressions, parallel (並列表記)
@cindex relative notes and simultaneous music (相対音符と同時進行する音楽)
@cindex relative notes and parallel expressions (相対音符と並列表記)
@cindex simultaneous music and relative notes (同時進行する音楽と相対音符)
@cindex parallel expressions and relative notes (並列表記と相対音符)

@funindex <<
@funindex >>
@funindex << ... >>

音楽用語集: @rglos{polyphony}

このテクニックは @notation{多声音楽} に対して有用です。@c
複数の声部や複数の譜を持つ音楽を入力するために、@c
音楽表記を並列に組み合わせます。@c
2 つの声部を同時に演奏すべきであるということを示すには、@c
単純に音楽表記を同時進行するよう組み合わせて入力します。@c
@q{同時進行} の音楽表記は @code{<<} と @code{>>} で音楽表記を@c
囲い込むことによって形成されます。@c
以下の例では、3 つのシークエンス (すべてのシークエンスはそれぞれ 2 つの音符を@c
保持しています) が同時進行するように組み合わされています:

@lilypond[verbatim,quote]
\relative c'' {
  <<
    { a2 g }
    { f2 e }
    { d2 b }
  >>
}
@end lilypond

入力の各レベルに対して異なる量のスペースをインデントとして与えていることに@c
注意してください。@c
LilyPond は行の先頭にどれくらい多く (あるいは少なく) のスペースがあるかを@c
気にしません。@c
しかしながら、上の例のように LilyPond コードにインデントを入れることによって@c
人間にとってはずっと読みやすくなります。

@warning{入力での各音符は前の音符との相対関係にあり、先頭の @code{@bs{}relative}
コマンドの中にある @code{c''} と相対関係にあるわけではありません。}


@subheading 同時進行する音楽表記: 単一の譜表
@c Simultaneous music expressions: single staff

楽曲の中にある譜の数を決定するために、@c
LilPond は最初の音楽表記の始まりを調べます。@c
始まりの音楽表記が単一の表記であった場合、楽譜の中の譜表は 1 つです。@c
以下の例は複雑な表記を持ちますが、単一の表記で始まっているため譜表も 1 つです。

@lilypond[verbatim,quote]
\relative c'' {
  c2 <<c e>> |
  << { e2 f } { c2 <<b d>> } >> |
}
@end lilypond


@node 複数の譜
@subsection 複数の譜
@translationof Multiple staves

@cindex multiple staves (複数の譜)
@cindex staves, multiple (複数の譜)
@cindex context (コンテキスト)
@cindex context, notation (記譜コンテキスト)
@cindex notation context (記譜コンテキスト)

@funindex \new Staff
@funindex new Staff
@funindex Staff
@funindex \new
@funindex new
@funindex Score
@funindex Voice
@funindex Lyrics
@funindex ChordNames

@ref{音楽表記についての説明} で見てきたように、@c
LilyPond 入力ファイルは音楽表記によって構築されています。@c
複数の同時進行の音楽表記で始まる楽譜の場合、LilyPond は複数の譜を作成します。@c
しかしながら、各譜表を明示的に作成すると何が起こるか@c
より容易に見て取ることができます。

複数の譜表を譜刻するには、1 つの譜表を形成する音楽の各部分の前に
@code{\new Staff} を付け加えます。@c
これらの @code{Staff} 要素は @code{<<} と @code{>>} で並列に組み合わされます:

@lilypond[verbatim,quote]
\relative c'' {
  <<
    \new Staff { \clef "treble" c4 }
    \new Staff { \clef "bass" c,,4 }
  >>
}
@end lilypond

コマンド @code{\new} は 1 つの @q{記譜コンテキスト} を導入します。@c
記譜コンテキストは音楽的イベント (音符や @code{\clef} コマンドなど) が@c
解釈される環境です。@c
単純な楽曲では、そのような記譜コンテキストは自動的に作成されます。@c
より複雑な楽曲ではコンテキストを明示的に記述することが望ましいです。

コンテキストにはいくつかのタイプがあります。@c
@code{Score}, @code{Staff}, @code{Voice} は旋律記譜を扱います。@c
一方、@code{Lyrics} は歌詞テキストをセットし、@code{ChordNames} は@c
コード ネームを譜刻します。

構文という観点で見ると、@code{\new} を音楽表記の先頭に付け加えることによって@c
より大きな音楽表記が作成されます。@c
これは数学でのマイナス符号に似ています。@c
数式 @math{(4+5)} は数学表記であり、@math{-(4+5)} はより大きな数学表記です。

ある譜表に挿入された@notation{拍子記号}はデフォルトで他のすべての譜に@c
影響を与えます。@c
一方で、ある譜表に挿入された調号は他のすべての譜に影響を@emph{与えません}。@c
記号によってデフォルトの振る舞いが異なるのは、移調する楽器を扱う楽譜の方が@c
複合リズム (polyrhythmic) の楽譜よりも一般的だからです。

@lilypond[verbatim,quote]
\relative c'' {
  <<
    \new Staff { \clef "treble" \key d \major \time 3/4 c4 }
    \new Staff { \clef "bass" c,,4 }
  >>
}
@end lilypond

@node 譜表グループ
@subsection 譜表グループ
@translationof Staff groups

@cindex piano staff (ピアノ譜)
@cindex staff, piano (ピアノ譜)
@cindex choir staff (合唱譜)
@cindex staff, choir (合唱譜)
@cindex grand staff (グランド譜)
@cindex staff, grand (グランド譜)
@cindex staff group (譜表グループ)

@funindex PianoStaff
@funindex GrandStaff
@funindex ChoirStaff

音楽用語集:
@rglos{brace},
@rglos{staff},
@rglos{system}.

ピアノ譜は @notation{ブレース} でつながれた 2 つの譜表として譜刻されます。@c
そのような譜表を譜刻することは @ref{複数の譜} での多声の例に@c
似ています。@c
しかしながら、今度は表記全体が @code{PianoStaff} の中に挿入されます:

@example
\new PianoStaff <<
  \new Staff @dots{}
  \new Staff @dots{}
>>
@end example

小さな例を挙げます:

@lilypond[verbatim,quote]
\relative c'' {
  \new PianoStaff <<
    \new Staff { \time 2/4 c4 e | g g, | }
    \new Staff { \clef "bass" c,,4 c' | e c | }
  >>
}
@end lilypond

ピアノ譜以外の譜表グループ化はオーケストラ譜向けには @code{\new GrandStaff}
で、ボーカル譜向けには @w{@code{\new ChoirStaff}} で導入されます。@c
これらの譜表グループはそれぞれタイプの異なるコンテキストを形成し、各システム
(訳者: 楽譜 1 行分のこと。ピアノ譜では右手と左手の 2 つの譜表ペアでの 1 行が
1 システムになります) の左端にブレースを付けて、@c
さらに、小節線の高さを制御します。


@seealso
記譜法リファレンス:
@ruser{Keyboard and other multi-staff instruments},
@ruser{譜を表示する}


@node 音符を組み合わせて和音にする
@subsection 音符を組み合わせて和音にする
@translationof Combining notes into chords

@cindex chords (和音)
@cindex note durations in chords (和音の中での音符の演奏時間)

@funindex <
@funindex >
@funindex < ... >

音符を @code{<< ... >>} で囲んでそれらの音符が同時進行であることを@c
示すことによって、それらの音符を@notation{和音}として@c
組み合わせる方法について見てきました。@c
しかしながら、和音であることを示すための通常の方法は音符を < ... > (山括弧)
で囲みます。@c
和音の中にある音符はすべて同じ演奏時間でなければならず、@c
その演奏時間は山括弧を閉じた後に置かれなければならないということに@c
注意してください。

@lilypond[verbatim,quote,relative=2]
r4 <c e g> <c f a>2
@end lilypond

和音は単一の音符とほとんど同じであると考えてください:
単一の音符に付け加えられるものはほとんどすべて和音にも付け加えられ、@c
付け加えるものはすべて山括弧の@emph{外}に付け加えられなければなりません。@c
例えば、あなたは連桁やタイなどのマークをコードに組み合わせることができます。@c
それらは山括弧の外側に置かれなければなりません。

@lilypond[verbatim,quote,relative=2]
r4 <c e g>~ <c f a>2 |
<c e g>8[ <c f a> <c e g> <c f a>]
  <c e g>8\>[ <c f a> <c f a> <c e g>]\! |
r4 <c e g>8.\p <c f a>16( <c e g>4-. <c f a>) |
@end lilypond

@seealso
記譜法リファレンス:
@ruser{和音の音符}


@node 単一譜表での多声
@subsection 単一譜表での多声
@translationof Single staff polyphony

@cindex polyphony (多声)
@cindex multiple voices (複数のボイス)
@cindex voices, more on one staff (1 つの譜表上に複数のボイス)
@cindex single staff polyphony (単一譜表の多声)
@cindex spacer rest (空白休符)
@cindex rest, spacer (空白休符)

@funindex << ... \\ ... >>
@funindex <<
@funindex \\
@funindex >>

LilyPond での多声音楽はまだ説明していないコンセプトを用いますので、@c
多声音楽についてここでは説明しません。@c
以下のセクションで多声音楽で用いるコンセプトを紹介し、@c
多声音楽について説明します。

@seealso
学習マニュアル:
@ref{音楽を保持するボイス}

記譜法リファレンス:
@ruser{同時進行する音符}

@ignore
異なる旋律が単一の譜に組み込まれる場合、それらは多声部として譜刻されます。@c
各声部はそれ自体の符幹 (符頭から上下に出る棒)、スラー、@c
連桁 (符幹と符幹を結ぶ横棒) を持ちます。@c
最上段の声部は符頭から上に伸びる符幹を持ち、@c
最下段の声部は下に伸びる符幹を持ちます。

そのような多声のパートを入力するには、各声部をシークエンスとして
(@w{@code{@{ ... @}}} を使って) 入力し、それらを @code{\\} で区切って@c
結合することで同時進行するように組み合わせます:

@lilypond[verbatim,quote,relative=2]
<<
  { a4 g2 f4~ 4 } \\
  { r4 g4 f2 f4 }
>>
@end lilypond

多声部音楽を譜刻する場合、空白休符を使用すると都合が良いかもしれません:
それは譜刻されない休符です。@c
空白休符は一時的に演奏されない声部の空白期間を埋めるのに有用です。@c
今度は通常の休符 (@code{r}) の代わりに空白休符 (@code{s}) を使った@c
上と同じ例を示します:

@lilypond[verbatim,quote,relative=2]
<<
  { a4 g2 f4~ 4 } \\
  { s4 g4 f2 f4 }
>>
@end lilypond

@noindent
さらに、これらの表記は任意にネストさせることができます。

@lilypond[verbatim,quote,relative=2]
<<
  \new Staff <<
    { a4 g2 f4~ 4 } \\
    { s4 g4 f2 f4 }
  >>
  \new Staff <<
    \clef bass
    { <c g>1 ~ <c g>4 } \\
    { e,,4 d e2 ~ 4}
  >>
>>
@end lilypond

@seealso
記譜法リファレンス:
@ruser{同時進行する音符}
@end ignore


@node 歌曲
@section 歌曲
@translationof Songs

このセクションでは声楽とシンプルな歌曲譜についての紹介を行います。

@menu
* 簡単な歌曲を作成する::
* 歌詞を旋律に揃える::
* 複数の譜への歌詞::
@end menu


@node 簡単な歌曲を作成する
@subsection 簡単な歌曲を作成する
@translationof Setting simple songs

@cindex lyrics (歌詞)
@cindex songs (歌)

@funindex \addlyrics
@funindex addlyrics

音楽用語集: @rglos{lyrics}

童謡の冒頭部分の旋律があります。@c
歌詞は @notation{Girls and boys come out to play} です:

@lilypond[verbatim,quote]
\relative c'' {
  \key g \major
  \time 6/8
  d4 b8 c4 a8 | d4 b8 g4
}
@end lilypond

@code{\addlyrics} キーワードで組み合わせることによって、@c
@notation{歌詞} をこれらの音符にセットすることができます。@c
歌詞は音節ごとにスペースで区切って入力します。

@lilypond[verbatim,quote]
<<
  \relative c'' {
    \key g \major
    \time 6/8
    d4 b8 c4 a8 | d4 b8 g4
  }
  \addlyrics {
    Girls and boys come | out to play,
  }
>>
@end lilypond

二重の山括弧 @w{@code{<< ... >>}} が楽曲全体を囲っていて、@c
音楽と歌詞が同時進行することを示しています。


@node 歌詞を旋律に揃える
@subsection 歌詞を旋律に揃える
@translationof Aligning lyrics to a melody

@cindex melisma (メリスマ)
@cindex extender line (延長線)
@cindex hyphens (ハイフン)
@cindex underscore (アンダスコア)
@cindex lyrics, aligning (歌詞を揃える)
@cindex aligning lyrics (歌詞を揃える)
@cindex lyrics, multi-syllable words (歌詞の中で複数の音節を持つ単語)
@cindex words with multiple syllables in lyrics (歌詞の中で複数の音節を持つ単語)

音楽用語集: @rglos{melisma}, @rglos{extender line}

童謡の次の行は @notation{The moon doth shine as bright as day} です。@c
これを前の例に付け加えてみましょう:

@lilypond[verbatim,quote]
<<
  \relative c'' {
    \key g \major
    \time 6/8
    d4 b8 c4 a8 | d4 b8 g4 g8 |
    a4 b8 c b a | d4 b8 g4. |
  }
  \addlyrics {
    Girls and boys come | out to play,
    The | moon doth shine as | bright as day; |
  }
>>
@end lilypond

上の例のコードをコンパイルすると、コンソール出力にいくつかの警告が表示されます:

@example
song.ly:12:29: warning: barcheck failed at: 5/8
    The | moon doth shine as
                             | bright as day; |
song.ly:12:46: warning: barcheck failed at: 3/8
    The | moon doth shine as | bright as day;
                                              |
@end example

これは小節チェックの有用性を示す良い例です。@c
今度は楽譜を見てください。@c
追加した歌詞は適切に音符に揃えられてはいません。@c
単語 @notation{shine} は 1 つの音符ではなく
2 つの音符に割り当てられるべきです。@c
これは @notation{メリスマ} と呼ばれ、@c
歌詞の音節 1 つを複数の音符に割り当てます。@c
音節を複数の音符に広げる方法はいくつかあります。@c
最も簡単な方法は割り当てられる音符にスラーを付けることです。@c
詳細は @ref{タイとスラー} を参照してください。

@lilypond[verbatim,quote]
<<
  \relative c'' {
    \key g \major
    \time 6/8
    d4 b8 c4 a8 | d4 b8 g4 g8 |
    a4 b8 c( b) a | d4 b8 g4. |
  }
  \addlyrics {
    Girls and boys come | out to play,
    The | moon doth shine as | bright as day; |
  }
>>
@end lilypond

今度は、単語は音符に対して正しく並んでいます。@c
しかしながら、@c
@notation{shine as} 上の音符に対する自動連桁は適当でないように見えます。@c
これを修正するために、手動連桁コマンドを挿入して自動連桁を@c
オーバライドします。@c
詳細は @ref{自動連桁と手動連桁} を参照してください。

@lilypond[verbatim,quote]
<<
  \relative c'' {
    \key g \major
    \time 6/8
    d4 b8 c4 a8 | d4 b8 g4 g8 |
    a4 b8 c([ b]) a | d4 b8 g4. |
  }
  \addlyrics {
    Girls and boys come | out to play,
    The | moon doth shine as | bright as day; |
  }
>>
@end lilypond

スラーを用いる方法のほかに、メリスマに含まれるべきである各音符に対応した@c
アンダスコア @code{_} を用いることによって@c
その歌詞がメリスマであるということを示すことができます:

@lilypond[verbatim,quote]
<<
  \relative c'' {
    \key g \major
    \time 6/8
    d4 b8 c4 a8 | d4 b8 g4 g8 |
    a4 b8 c[ b] a | d4 b8 g4. |
  }
  \addlyrics {
    Girls and boys come | out to play,
    The | moon doth shine _ as | bright as day; |
  }
>>
@end lilypond

ある歌詞がいくつかの音符に亘って延長される場合や@c
単一の非常に長い音符に割り当てられる場合、@c
通常はその歌詞からその歌詞に対応しているすべての音符の下に@c
@notation{延長線} が描かれます。@c
延長線は 2 つのアンダスコア @code{__} で挿入します。@c
今度は、例として Purcell の @notation{Dido and Æeneas} から@c
最初の 3 小節目からを挙げます:

@lilypond[verbatim,quote]
<<
  \relative c'' {
    \key g \minor
    \time 3/2
    g2 a bes | bes2( a) b2 |
    c4.( bes8 a4. g8 fis4.) g8 | fis1
  }
  \addlyrics {
    When I am | laid,
    am | laid __ in | earth,
  }
>>
@end lilypond

今までの例には複数の音節を持つ単語はありませんでした。@c
通常、複数の音節を持つ単語は音節ごとに 1 つの音符に分割され、@c
音節間はハイフンで結ばれます。@c
ハイフンは 2 つのダッシュとして入力し、@c
その結果として音節の間にハイフンが描かれます。@c
今度の例では歌詞に複数の音節を持つ単語が含まれ、@c
我々が今まで歌詞を音符に揃える方法について学んだことがすべて含まれています。

@c no ragged-right here because otherwise the hyphens get lost,
@c but the example is long enough to avoid looking strange.
@lilypond[verbatim,quote,noragged-right]
<<
  \relative c' {
    \key g \major
    \time 3/4
    \partial 4
    d4 | g4 g a8( b) | g4 g b8( c) |
    d4 d e | c2
  }
  \addlyrics {
    A -- | way in a __ | man -- ger,
    no __ | crib for a | bed, __
  }
>>
@end lilypond

ある歌詞では -- 特にイタリア語では -- 反対のことが求められます:
複数の音節を 1 つの音符にセットします。@c
これは音節を単一のアンダスコア @code{_} (スペース無し) でリンクさせるか、@c
クォートで囲むことによって達成されます。@c
今度の例は Rossini の @notation{Figaro} からで、@c
@notation{Largo al factotum} の @notation{al} は
@notation{Largo} の @notation{go} と同じ音符で歌われなければなりません:

@c no ragged-right here because otherwise the hyphens get lost,
@c but the example is long enough to avoid looking strange.
@lilypond[verbatim,quote,noragged-right]
<<
  \relative c' {
    \clef "bass"
    \key c \major
    \time 6/8
    c4.~ 8 d b | c8([ d]) b c d b | c8
  }
  \addlyrics {
    Lar -- go_al fac -- | to -- tum del -- la cit -- | tÃ
  }
>>
@end lilypond

@seealso
記譜法リファレンス:
@ruser{Vocal music}
@c 歌曲譜


@node 複数の譜への歌詞
@subsection 複数の譜への歌詞
@translationof Lyrics to multiple staves

@cindex lyrics and multiple staves (歌詞と複数の譜)
@cindex multiple staves and lyrics (複数の譜と歌詞)

@code{\addlyrics} を用いた簡単なアプローチは歌詞を複数の譜表の下に置くために@c
使用することができます。@c
ここで、Handel の @notation{Judas Maccabæus} から例を挙げます:

@lilypond[verbatim,quote]
<<
  \relative c'' {
    \key f \major
    \time 6/8
    \partial 8
    c8 | c8([ bes]) a a([ g]) f | f'4. b, | c4.~ 4
  }
  \addlyrics {
    Let | flee -- cy flocks the | hills a -- | dorn, __
  }
  \relative c' {
    \key f \major
    \time 6/8
    \partial 8
    r8 | r4. r4 c8 | a'8([ g]) f f([ e]) d | e8([ d]) c bes'4
  }
  \addlyrics {
    Let | flee -- cy flocks the | hills a -- dorn,
  }
>>
@end lilypond

この簡単な例よりも複雑な楽譜では、変数を使って楽譜構造を音符と歌詞から@c
分離したほうが良いです。@c
このことは @ref{変数を用いて楽曲を編成する} で議論されています。


@seealso
記譜法リファレンス:
@ruser{Vocal music}
@c 歌曲譜


@node 仕上げ
@section 仕上げ
@translationof Final touches

このセクションはチュートリアルの最終セクションです。@c
単純な楽譜に仕上げを加える方法を示し、@c
このマニュアルの残りの部分についての紹介を行います。

@menu
* 変数を用いて楽曲を編成する::
* タイトルを付け加える::
* 絶対音符名::
* このチュートリアルの後にすべきこと::
@end menu


@node 変数を用いて楽曲を編成する
@subsection 変数を用いて楽曲を編成する
@translationof Organizing pieces with variables

@cindex variables (変数)
@cindex variables, defining (変数を定義する)
@cindex identifiers (識別子)
@cindex macros (マクロ)
@cindex assigning variables (変数を割り当てる)
@cindex using variables (変数を使用する)
@cindex variables, using (変数を使用する)
@cindex variables, characters allowed in (変数で使用できる文字)
@cindex characters allowed in variables (変数で使用できる文字)

これまで議論してきたすべての要素を組み合わせてより大きなファイルを作成すると、@c
音楽表記はずっと大きくなります。@c
多くの譜を持つ多声音楽では、入力ファイルはとても混乱しやすくなります。@c
@emph{変数} を使って混乱を避けることができます。

変数 (これは識別子やマクロとも言えます) を使うことによって、@c
音楽表記の複雑さを打破することができます。@c
変数は以下のように割り当てられます:

@example
namedMusic = @{ @dots{} @}
@end example

音楽表記 @code{namedMusic} の内容は名前の前にバックスラッシュを置くことによって
(@code{\namedMusic}、これはまさに LilyPond の標準コマンドと同様です) 後で@c
使用することができます。

@lilypond[verbatim,quote]
violin = \new Staff {
  \relative c'' {
    a4 b c b
  }
}

cello = \new Staff {
  \relative c {
    \clef "bass"
    e2 d
  }
}

{
  <<
    \violin
    \cello
  >>
}
@end lilypond

@noindent
変数の名前に使えるのはアルファベットだけであり、数字、アンダスコア、ダッシュを@c
使うことはできません。

変数はメインの音楽表記の @emph{前} に定義されていなければなりません。@c
しかしながら定義後は必要とされる場所で何度でも使用できます。@c
変数の定義後は、その変数を他の変数定義の中で使うことも可能であり、
楽曲のある部分が何度もリピートしている場合に入力の手間を省くことができます。

@lilypond[verbatim,quote]
tripletA = \tuplet 3/2 { c,8 e g }
barA = { \tripletA \tripletA \tripletA \tripletA }

\relative c'' {
  \barA \barA
}
@end lilypond

変数を入力ファイルの中にある他の多くのオブジェクト タイプに対しても@c
使用できます。
例えば以下のようにです:

@example
width = 4.5\cm
name = "Wendy"
aFivePaper = \paper @{ paperheight = 21.0 \cm @}
@end example

変数の内容次第では、変数は他の場所で使用することができます。@c
以下の例は上の例の変数を使用しています:

@example
\paper @{
  \aFivePaper
  line-width = \width
@}
@{
  c4^\name
@}
@end example


@node タイトルを付け加える
@subsection タイトルを付け加える
@translationof Adding titles

@cindex title (タイトル)
@cindex headers (ヘッダ)
@cindex header block (ヘッダ ブロック)

@funindex \header
@funindex header

タイトル、作曲者、作品番号、それに類似の情報は
@code{\header} ブロックの中に挿入されます。@c
これはメインの音楽表記の外に存在します。@c
普通、@code{\header} ブロックはバージョン番号の下に置かれます。

@example
\version @w{"@version{}"}

\header @{
  title = "Symphony"
  composer = "Me"
  opus = "Op. 9"
@}

@{
  @dots{} music @dots{}
@}
@end example

ファイルが処理されると、タイトルと作曲者は楽譜の上に譜刻されます。@c
タイトルについての更なる情報は、@ruser{Creating titles headers and footers}
を参照してください。


@node 絶対音符名
@subsection 絶対音符名
@translationof Absolute note names

@cindex note names (音符名)
@cindex note names, absolute (絶対音符名)
@cindex absolute mode (絶対モード)
@cindex absolute values for pitches (ピッチの絶対値)
@cindex pitches, absolute values (ピッチの絶対値)
@cindex absolute note names (絶対音符名)

これまで我々は常にピッチを定義するのに @code{\relative} を使ってきました。@c
これはたいていの音楽を入力するのに最も容易な方法です。@c
しかしながら、ピッチを定義するための方法がもう一つ存在します:
絶対モードです。

あなたが @code{\relative} を省略した場合、LilyPond はすべてのピッチを@c
絶対値として扱います。@c
@code{c'} は常にミドル C を意味し、@code{b} は常にミドル C の 1 音下の音符を@c
意味し、@code{g,} は常にヘ音記号の譜表の最下段の譜線上にある音符を意味します。

@lilypond[verbatim,quote]
{
  \clef "bass"
  c'4 b g, g, |
  g,4 f, f c' |
}
@end lilypond

今度は 4 オクターブの音階があります:

@lilypond[verbatim,quote]
{
  \clef "bass"
  c,4 d, e, f, |
  g,4 a, b, c |
  d4 e f g |
  a4 b c' d' |
  \clef "treble"
  e'4 f' g' a' |
  b'4 c'' d'' e'' |
  f''4 g'' a'' b'' |
  c'''1 |
}
@end lilypond

ト音記号に旋律を書く場合は多くのクォート @code{'} 記号が使用されることが@c
見て取れます。@c
モーツァルトからの以下の楽譜の断片について考えてみます:

@lilypond[verbatim,quote]
{
  \key a \major
  \time 6/8
  cis''8. d''16 cis''8 e''4 e''8 |
  b'8. cis''16 b'8 d''4 d''8 |
}
@end lilypond

これらすべてのクォート記号は入力ファイルを読みにくいものにして、@c
エラーの原因になります。@c
@code{\relative} を使うことで、上の例はずっと読みやすく、入力しやすくなります:

@lilypond[verbatim,quote]
\relative c'' {
  \key a \major
  \time 6/8
  cis8. d16 cis8 e4 e8 |
  b8. cis16 b8 d4 d8 |
}
@end lilypond

@code{\relative} モードを使っているときにあなたがオクターブ記号 (@code{'} や
@code{,}) を付け間違えた場合、すぐにわかります
-- 多くの音符が間違ったオクターブに譜刻されます。@c
絶対モードを使っているときに付け間違いをした場合、@c
はっきりとせず、見つけにくいです。

しかしながら、絶対モードは大きな音程を持つ音楽に対しては有用であり、@c
LilyPond ファイルをコンピュータで生成する場合は非常に有用です。


@node このチュートリアルの後にすべきこと
@subsection このチュートリアルの後にすべきこと
@translationof After the tutorial

このチュートリアルを終えた後、あなたは楽譜を 1 つ、2 つ書いてみるべきです。@c
@ref{テンプレート} にある楽譜の 1 つに音符を付け加えることから始めてください。@c
あなたがこのチュートリアルではカバーされなかった記譜法を必要とする場合、@c
@ruser{音楽記譜法} で始まる記譜法リファレンスを参照してください。@c
あなたがテンプレートではカバーされていない楽器のアンサンブルのために@c
楽譜を書こうとする場合、@ref{テンプレートを拡張する} を参照してください。

あなたがいくつかの短い楽譜を書き終えた後は、@c
学習マニュアルの残りの部分 (3～5 章) を読んでください。@c
もちろん、今それらを読んでも何も問題はありません！@c
しかしながら、学習マニュアルの残りの部分はあなたが LilyPond 入力に@c
馴れていると仮定しています。@c
あなたはそれらの章を今すぐ一読し、もっと経験を積んだ後に読み直すことを@c
望むかもしれません。

このチュートリアルと学習マニュアルの残りの部分では、@c
各セクションの最後に @strong{参照} があり、他のセクションを参照してます:
初めて本書を読むときはこれらの参照を追うべきではありません。@c
あなたが学習マニュアルをすべて読み終えたとき、いくつかのセクションを読み返し、@c
さらに参照を追おうと思うかもしれません。

@ref{マニュアルの概要} をまだ読んでいないのなら、@c
それを @emph{読んでください}。@c
LilyPond についての情報は多いため、新しく LilyPond を始める人はしばしば、@c
必要な情報を得るためにどこを読むべきかわからないことがあります。@c
5 分間使ってマニュアルの概要を注意深く読めば、@c
あなたは何時間も見当違いの場所を読むフラストレーションを持たずに@c
済ますことができるでしょう！
