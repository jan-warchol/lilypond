@c -*- coding: utf-8; mode: texinfo; -*-
@ignore
    Translation of GIT committish: FILL-IN-HEAD-COMMITTISH

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c \version "2.19.2"

@node Rhythms
@section Rhythms

@lilypondfile[quote]{rhythms-headword.ly}

This section discusses rhythms, rests, durations, beaming and bars.

@menu
* Writing rhythms::
* Writing rests::
* Displaying rhythms::
* Beams::
* Bars::
* Special rhythmic concerns::
@end menu


@node Writing rhythms
@subsection Writing rhythms

@menu
* Durations::
* Tuplets::
* Scaling durations::
* Ties::
@end menu

@node Durations
@unnumberedsubsubsec Durations

@cindex durations, of notes
@cindex note durations
@cindex length of notes
@cindex note lengths

@funindex \longa
@funindex longa
@funindex \breve
@funindex breve
@funindex \maxima
@funindex maxima

Durations are designated by numbers and dots.  Durations are entered
as their reciprocal values.  For example, a quarter note is entered
using a @code{4} (since it is a 1/4 note), and a half note is entered
using a @code{2} (since it is a 1/2 note).  For notes longer than a
whole you must use the @code{\longa} (a double breve) and
@code{\breve} commands.  Durations as short as 128th notes may be
specified.  Shorter values are possible, but only as beamed notes.

@c Two 64th notes are needed to obtain beams
@lilypond[quote,verbatim,relative=2]
\time 8/1
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c128 c128
@end lilypond

Here are the same durations with automatic beaming turned off.

@c not strictly "writing rhythms"; more of a "displaying" thing,
@c but it's ok here.  -gp
@lilypond[quote,verbatim,relative=2]
\time 8/1
\autoBeamOff
c\longa c\breve c1 c2
c4 c8 c16 c32 c64 c128 c128
@end lilypond

A note with the duration of a quadruple breve may be entered with
@code{\maxima}, but this is supported only within ancient music
notation.  For details, see @ref{Ancient notation}.

@cindex duration, default
@cindex default note duration
@cindex note duration, default

If the duration is omitted, it is set to the previously
entered duration.  The default for the first note is a quarter
note.

@lilypond[quote,verbatim,relative=2]
a a a2 a a4 a a1 a
@end lilypond

Durations occuring on their own within a music sequence will take
their pitches from the preceding note or chord.

@lilypond[quote,verbatim,relative=2]
\time 8/1
c \longa \breve 1 2
4 8 16 32 64 128 128
@end lilypond

@cindex notes, dotted
@cindex dotted notes
@cindex notes, double-dotted
@cindex double-dotted notes

@funindex .

To obtain dotted note lengths, place a dot (@code{.}) after the
duration.  Double-dotted notes are specified by appending two
dots, and so on.

@lilypond[quote,verbatim,relative=2]
a4 b c4. b8 a4. b4.. c8.
@end lilypond

Some durations cannot be represented with just binary durations
and dots; they can be represented only by tying two or more
notes together.  For details, see @ref{Ties}.

For ways of specifying durations for the syllables of lyrics and
ways of aligning lyrics to notes, see @ref{Vocal music}.

Optionally, notes can be spaced strictly proportionately to their
duration.  For details of this and other settings which control
proportional notation, see @ref{Proportional notation}.

@funindex \dotsUp
@funindex dotsUp
@funindex \dotsDown
@funindex dotsDown
@funindex \dotsNeutral
@funindex dotsNeutral

Dots are normally moved up to avoid staff lines, except in
polyphonic situations.  Dots may be manually placed above or below
the staff; see @ref{Direction and placement}.


@predefined
@code{\autoBeamOn},
@code{\autoBeamOff},
@code{\dotsUp},
@code{\dotsDown},
@code{\dotsNeutral}.
@endpredefined


@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{alternative-breve-notes.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{changing-the-number-of-augmentation-dots-per-note.ly}

@seealso
Music Glossary:
@rglos{breve},
@rglos{longa},
@rglos{maxima},
@rglos{note value},
@rglos{Duration names notes and rests}.

Notation Reference:
@ref{Automatic beams},
@ref{Ties},
@ref{Stems},
@ref{Writing rhythms},
@ref{Writing rests},
@ref{Vocal music},
@ref{Ancient notation},
@ref{Proportional notation}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Dots},
@rinternals{DotColumn}.

@knownissues
@c Deliberately duplicated in Durations and Rests.  -gp
There is no fundamental limit to rest durations (both in terms of
longest and shortest), but the number of glyphs is limited:
rests from 128th to maxima (8 x whole) may be printed.


@node Tuplets
@unnumberedsubsubsec Tuplets

@cindex tuplets
@cindex triplets

@funindex \tuplet
@funindex tuplet

Tuplets are made from a music expression with the @code{\tuplet}
command, multiplying the speed of the music expression by a
fraction:

@example
\tuplet @var{fraction} @{ @var{music} @}
@end example

@noindent
The fraction's numerator will be printed over or
under the notes, optionally with a bracket.  The most common
tuplets are triplets: 3@tie{}notes sound within the duration
normally allowed for@tie{}2:

@lilypond[quote,verbatim,relative=2]
a2 \tuplet 3/2 { b4 4 4 }
c4 c \tuplet 3/2 { b4 a g }
@end lilypond

@cindex tuplet grouping
@noindent
When entering long passages of tuplets, having to write a separate
@code{\tuplet} command for each group is inconvenient.  It is
possible to specify the duration of one tuplet group directly
before the music in order to have the tuplets grouped
automatically:

@lilypond[quote,verbatim,relative=2]
g2 r8 \tuplet 3/2 8 { cis16 d e e f g g f e }
@end lilypond

@cindex tuplet bracket placement

@funindex \tupletUp
@funindex tupletUp
@funindex \tupletDown
@funindex tupletDown
@funindex \tupletNeutral
@funindex tupletNeutral

Tuplet brackets may be manually placed above or below the staff;
see @ref{Direction and placement}.

Tuplets may be nested:

@lilypond[quote,verbatim,relative=2]
\autoBeamOff
c4 \tuplet 5/4 { f8 e f \tuplet 3/2 { e[ f g] } } f4
@end lilypond

Modifying nested tuplets which begin at the same musical moment
must be done with @code{\tweak}.

To modify the duration of notes without printing a tuplet bracket,
see @ref{Scaling durations}.


@predefined
@code{\tupletUp},
@code{\tupletDown},
@code{\tupletNeutral}.
@endpredefined


@snippets

@cindex tuplet formatting
@cindex triplet formatting

@funindex tupletNumberFormatFunction
@funindex tupletSpannerDuration

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{entering-several-tuplets-using-only-one--times-command.ly}

@cindex Tuplet number changes

@funindex TupletNumber

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{changing-the-tuplet-number.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{non-default-tuplet-numbers.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{controlling-tuplet-bracket-visibility.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{permitting-line-breaks-within-beamed-tuplets.ly}

@seealso
Music Glossary:
@rglos{triplet},
@rglos{tuplet},
@rglos{polymetric}.

Learning Manual:
@rlearning{Tweaking methods}.

Notation Reference:
@ref{Time administration},
@ref{Scaling durations},
@ref{The tweak command},
@ref{Polymetric notation}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TupletBracket},
@rinternals{TupletNumber},
@rinternals{TimeScaledMusic}.

@cindex grace notes within tuplet brackets

@knownissues
Grace notes may be placed within tuplet brackets, @emph{except}
when a staff begins with a grace note followed by a tuplet.  In this
particular case, the grace note must be placed before the @code{\tuplet}
command to avoid errors.

@cindex tempo marks within tuplet brackets

When using a tuplet at the beginning of a piece with a @code{\tempo}
mark, the music must be explicitly entered in a @code{\new Voice}
block, as discussed in @rlearning{Voices contain music}.


@node Scaling durations
@unnumberedsubsubsec Scaling durations

@cindex scaling durations
@cindex durations, scaling

The duration of single notes, rests or chords may be multiplied by a
fraction @code{N/M} by appending @code{*N/M} (or @code{*N} if @code{M}
is 1) to the duration.  This will not affect the appearance of the
notes or rests produced, but the altered duration will be used in
calculating the position within the measure and setting the duration
in the MIDI output.  Multiplying factors may be combined like
@code{*L*M/N}.  Factors are part of the duration: if a duration is
not specified for subsequent notes, the default duration taken from
the preceding note will include any scaling factor.

In the following example, the first three notes take up exactly
two beats, but no triplet bracket is printed.

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Alter durations to triplets
a4*2/3 gis a
% Normal durations
a4 a
% Double the duration of chord
<a d>4*2
% Duration of quarter, appears like sixteenth
b16*4 c4
@end lilypond

The duration of spacer rests may also be modified by
a multiplier.  This is useful for skipping many measures, e.g.,
@code{s1*23}.

@cindex compressing music
@cindex expanding music

@funindex \scaleDurations
@funindex scaleDurations

Longer stretches of music may be compressed by a fraction in the
same way, as if every note, chord or rest had the fraction as a
multiplier.  This leaves the appearance of the music unchanged but
the internal duration of the notes will be multiplied by the
fraction @emph{num}/@emph{den}.  Here is an example showing how music
can be compressed and expanded:

@lilypond[quote,relative=2,verbatim]
\time 2/4
% Normal durations
<c a>4 c8 a
% Scale music by *2/3
\scaleDurations 2/3 {
  <c a f>4. c8 a f
}
% Scale music by *2
\scaleDurations 2/1 {
  <c' a>4 c8 b
}
@end lilypond

One application of this command is in polymetric
notation, see @ref{Polymetric notation}.

@seealso
Notation Reference:
@ref{Tuplets},
@ref{Invisible rests},
@ref{Polymetric notation}.

Snippets:
@rlsr{Rhythms}.

@knownissues
The calculation of the position within a measure must take into
account all the scaling factors applied to the notes within that
measure and any fractional carry-out from earlier measures.  This
calculation is carried out using rational numbers.  If an intermediate
numerator or denominator in that calculation exceeds 2^30 the
execution and typesetting will stop at that point without indicating
an error.


@node Ties
@unnumberedsubsubsec Ties

@cindex tie

@funindex ~

A tie connects two adjacent note heads of the same pitch.  The tie
in effect extends the duration of a note.

@warning{Ties should not be confused with @emph{slurs}, which
indicate articulation, or @emph{phrasing slurs}, which indicate
musical phrasing.  A tie is just a way of extending a note
duration, similar to the augmentation dot.}

A tie is entered by appending a tilde symbol (@code{~}) to the first
of each pair of notes being tied.  This indicates that the note
should be tied to the following note, which must be at the same pitch.

@lilypond[quote,verbatim,relative=2]
a2~ 4~ 16 r r8
@end lilypond

Ties can make use of the @q{last explicit pitch} interpretation of
isolated durations:

@lilypond[quote,verbatim,relative=2]
a2~ 4~ 16 r r8
@end lilypond

Ties are used either when the note crosses a bar line, or when
dots cannot be used to denote the rhythm.  Ties should also be
used when note values cross larger subdivisions of the measure:

@lilypond[verbatim,quote]
\relative c' {
  r8 c~ 2 r4 |
  r8^"not" c2~ 8 r4
}
@end lilypond

If you need to tie many notes across bar lines, it may be
easier to use automatic note splitting, see @ref{Automatic note
splitting}.  This mechanism automatically splits long notes, and
ties them across bar lines.

@cindex ties and chords
@cindex chords and ties

When a tie is applied to a chord, all note heads whose pitches
match are connected.  When no note heads match, no ties will be
created.  Chords may be partially tied by placing the ties inside
the chord.

@lilypond[quote,verbatim,relative=1]
<c e g>2 ~ 2
<c e g>4~ <c e g c>
<c~ e g~ b> <c e g b>
@end lilypond

@cindex repeating ties
@cindex ties, repeating
@cindex volta brackets and ties
@cindex ties and volta brackets

@funindex \repeatTie
@funindex repeatTie

When a second alternative of a repeat starts with a tied note, you
have to specify the repeated tie as follows:

@lilypond[quote,relative=2,verbatim]
\repeat volta 2 { c g <c e>2~ }
\alternative {
  % First alternative: following note is tied normally
  { <c e>2. r4 }
  % Second alternative: following note has a repeated tie
  { <c e>2\repeatTie d4 c } }
@end lilypond

@cindex laissez vibrer
@cindex ties, laissez vibrer

@funindex \laissezVibrer
@funindex laissezVibrer

@notation{L.v.}@: ties (@notation{laissez vibrer}) indicate that
notes must not be damped at the end.  It is used in notation for
piano, harp and other string and percussion instruments.  They can
be entered as follows:

@lilypond[quote,verbatim,relative=1]
<c f g>1\laissezVibrer
@end lilypond

@cindex ties, placement

@funindex \tieUp
@funindex tieUp
@funindex \tieDown
@funindex tieDown
@funindex \tieNeutral
@funindex tieNeutral

Ties may be made to curve up or down manually; see
@ref{Direction and placement}.

@cindex ties, appearance
@cindex ties, dotted
@cindex ties, dashed
@cindex dashed ties
@cindex dotted ties

@funindex \tieDotted
@funindex tieDotted
@funindex \tieDashed
@funindex tieDashed
@funindex \tieSolid
@funindex tieSolid

Ties may be made dashed, dotted, or a combination of solid and
dashed.

@lilypond[quote, verbatim, relative=1]
\tieDotted
c2~ 2
\tieDashed
c2~ 2
\tieHalfDashed
c2~ 2
\tieHalfSolid
c2~ 2
\tieSolid
c2~ 2
@end lilypond

Custom dash patterns can be specified:

@lilypond[quote, verbatim, relative=1]
\tieDashPattern #0.3 #0.75
c2~ 2
\tieDashPattern #0.7 #1.5
c2~ 2
\tieSolid
c2~ 2
@end lilypond

Dash pattern definitions for ties have the same structure as dash
pattern definitions for slurs. For more information about complex dash
patterns, see @ref{Slurs}.

Override @var{whiteout} and @var{layer} layout properties for ties that
collide with other objects in a staff.

@lilypond[verbatim,quote,ragged-right,relative=2]
\override Tie.layer = #-2
\override Staff.TimeSignature.layer = #-1
\override Staff.KeySignature.layer = #-1
\override Staff.TimeSignature.whiteout = ##t
\override Staff.KeySignature.whiteout = ##t
b2 b~
\time 3/4
\key a \major
b r4
@end lilypond

@predefined
@code{\tieUp},
@code{\tieDown},
@code{\tieNeutral},
@code{\tieDotted},
@code{\tieDashed},
@code{\tieDashPattern},
@code{\tieHalfDashed},
@code{\tieHalfSolid},
@code{\tieSolid}.
@endpredefined

@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{using-ties-with-arpeggios.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{engraving-ties-manually.ly}

@seealso
Music Glossary:
@rglos{tie},
@rglos{laissez vibrer}.

Notation Reference:
@ref{Slurs},
@ref{Automatic note splitting}.

Snippets:
@rlsr{Expressive marks},
@rlsr{Rhythms}.

Internals Reference:
@rinternals{LaissezVibrerTie},
@rinternals{LaissezVibrerTieColumn},
@rinternals{TieColumn},
@rinternals{Tie}.

@knownissues
Switching staves when a tie is active will not produce a slanted tie.

Changing clefs or ottavations during a tie is not really well-defined.
In these cases, a slur may be preferable.


@node Writing rests
@subsection Writing rests

Rests are entered as part of the music in music expressions.

@menu
* Rests::
* Invisible rests::
* Full measure rests::
@end menu

@node Rests
@unnumberedsubsubsec Rests

@cindex rest
@cindex rest, entering durations
@cindex maxima rest
@cindex longa rest
@cindex breve rest

@funindex \rest
@funindex rest
@funindex r
@funindex \maxima
@funindex maxima
@funindex \longa
@funindex longa
@funindex \breve
@funindex breve

Rests are entered like notes with the note name @code{r}.
Durations longer than a whole rest use the following predefined
commands:

@c \time 16/1 is used to avoid spurious bar lines
@c and long tracts of empty measures
@lilypond[quote,verbatim,relative=2]
\new Staff {
  % These two lines are just to prettify this example
  \time 16/1
  \omit Staff.TimeSignature
  % Print a maxima rest, equal to four breves
  r\maxima
  % Print a longa rest, equal to two breves
  r\longa
  % Print a breve rest
  r\breve
  r1 r2 r4 r8 r16 r32 r64 r128
}
@end lilypond

@cindex rest, multi-measure
@cindex rest, whole-measure

Whole measure rests, centered in the middle of the measure, must be
entered as multi-measure rests.  They can be used for a single
measure as well as many measures and are discussed in
@ref{Full measure rests}.

@cindex rest, specifying vertical position

To explicitly specify a rest's vertical position, write a note
followed by @code{\rest}.  A rest of the duration of the note will
be placed at the staff position where the note would appear.  This
allows for precise manual formatting of polyphonic music, since the
automatic rest collision formatter will not move these rests.

@lilypond[quote,verbatim,relative=2]
a4\rest d4\rest
@end lilypond

@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{rest-styles.ly}

@seealso
Music Glossary:
@rglos{breve},
@rglos{longa},
@rglos{maxima}.

Notation Reference:
@ref{Full measure rests}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Rest}.

@knownissues
@c Deliberately duplicated in Durations and Rests.  -gp
There is no fundamental limit to rest durations (both in terms of
longest and shortest), but the number of glyphs is limited: there
are rests from 128th to maxima (8 x whole).


@node Invisible rests
@unnumberedsubsubsec Invisible rests

@cindex skip
@cindex invisible rest
@cindex rest, invisible
@cindex spacer note
@cindex spacer rest

@funindex s
@funindex \skip
@funindex skip

An invisible rest (also called a @q{spacer rest}) can be entered
like a note with the note name@tie{}@code{s}:

@lilypond[verbatim,quote,relative=2]
c4 c s c
s2 c
@end lilypond

@cindex lyrics, skip

Spacer rests are available only in note mode and chord mode.  In
other situations, for example, when entering lyrics, the
command @code{\skip} is used to skip a musical moment.
@code{\skip} requires an explicit duration, but this is ignored if
the lyrics derive their durations from the notes in an associated
melody through @code{\addlyrics} or @code{\lyricsto}.

@lilypond[quote,verbatim,relative=2]
<<
  {
    a2 \skip2 a2 a2
  }
  \new Lyrics {
    \lyricmode {
      foo2 \skip 1 bla2
    }
  }
>>
@end lilypond

Because @code{\skip} is a command, it does not affect the default
durations of following notes, unlike@tie{}@code{s}.

@lilypond[quote,verbatim,relative=2]
<<
  {
    \repeat unfold 8 { a4 }
  }
  {
    a4 \skip 2 a |
    s2 a
  }
>>
@end lilypond


A spacer rest implicitly causes @code{Staff} and @code{Voice}
contexts to be created if none exist, just like notes and rests
do:

@lilypond[quote,verbatim,relative=2]
s1 s s
@end lilypond

@code{\skip} simply skips musical time; it creates no output of
any kind.

@lilypond[quote,verbatim,relative=2]
% This is valid input, but does nothing
\skip 1 \skip1 \skip 1
@end lilypond

@seealso
Learning Manual:
@rlearning{Visibility and color of objects}.

Notation Reference:
@ref{Hidden notes},
@ref{Visibility of objects}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{SkipMusic}.


@node Full measure rests
@unnumberedsubsubsec Full measure rests

@cindex multi-measure rests
@cindex full-measure rests
@cindex rest, multi-measure
@cindex rest, full-measure
@cindex whole rest for a full measure
@cindex rest, whole for a full measure

@funindex R

Rests for one or more full measures are entered like notes with
the note name uppercase @code{R}:

@lilypond[quote,verbatim,relative=2]
% Rest measures contracted to single measure
\compressFullBarRests
R1*4
R1*24
R1*4
b2^"Tutti" b4 a4
@end lilypond

The duration of full-measure rests is identical to the duration
notation used for notes.  The duration in a multi-measure rest must
always be an integral number of measure-lengths, so augmentation dots
or fractions must often be used:

@lilypond[quote,verbatim,relative=2]
\compressFullBarRests
\time 2/4
R1 | R2 |
\time 3/4
R2. | R2.*2 |
\time 13/8
R1*13/8 | R1*13/8*12 |
\time 10/8
R4*5*4 |
@end lilypond

A full-measure rest is printed as either a whole or breve rest,
centered in the measure, depending on the time signature.

@lilypond[quote,verbatim,relative=2]
\time 4/4
R1 |
\time 6/4
R1*3/2 |
\time 8/4
R1*2 |
@end lilypond

@cindex multi-measure rest, expanding
@cindex multi-measure rest, contracting

@funindex \expandFullBarRests
@funindex expandFullBarRests
@funindex \compressFullBarRests
@funindex compressFullBarRests

By default a multi-measure rest is expanded in the printed score to
show all the rest measures explicitly.  Alternatively, a multi-measure
rest can be shown as a single measure containing a multi-measure rest
symbol, with the number of measures of rest printed above the measure:

@lilypond[quote,verbatim,relative=2]
% Default behavior
\time 3/4 r2. | R2.*2 |
\time 2/4 R2 |
\time 4/4
% Rest measures contracted to single measure
\compressFullBarRests
r1 | R1*17 | R1*4 |
% Rest measures expanded
\expandFullBarRests
\time 3/4
R2.*2 |
@end lilypond


@cindex text on multi-measure rest
@cindex multi-measure rest, attaching text
@cindex script on multi-measure rest
@cindex multi-measure rest, script
@cindex fermata on multi-measure rest
@cindex multi-measure rest, attaching fermata
@cindex markup on multi-measure rest
@cindex multi-measure rest with markup

@funindex \fermataMarkup
@funindex fermataMarkup
@funindex MultiMeasureRestText

Markups can be added to multi-measure rests.
The predefined command @code{\fermataMarkup}
is provided for adding fermatas.

@lilypond[quote,verbatim,relative=2]
\compressFullBarRests
\time 3/4
R2.*10^\markup { \italic "ad lib." }
R2.^\fermataMarkup
@end lilypond

@warning{Markups attached to a multi-measure rest are objects of type
@code{MultiMeasureRestText}, not @code{TextScript}.  Overrides must
be directed to the correct object, or they will be ignored.  See the
following example:}

@lilypond[quote,verbatim,relative=2]
% This fails, as the wrong object name is specified
\override TextScript.padding = #5
R1^"wrong"
% This is the correct object name to be specified
\override MultiMeasureRestText.padding = #5
R1^"right"
@end lilypond

When a multi-measure rest immediately follows a @code{\partial}
setting, resulting bar-check warnings may not be displayed.


@funindex \textLengthOn
@funindex textLengthOn
@funindex \textLengthOff
@funindex textLengthOff
@funindex \fermataMarkup
@funindex fermataMarkup
@funindex \compressFullBarRests
@funindex compressFullBarRests
@funindex \expandFullBarRests
@funindex expandFullBarRests

@predefined
@code{\textLengthOn},
@code{\textLengthOff},
@code{\fermataMarkup},
@code{\compressFullBarRests},
@code{\expandFullBarRests}.
@endpredefined


@snippets

@cindex church rest
@cindex rest, church
@cindex kirchenpausen

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{changing-form-of-multi-measure-rests.ly}

@cindex multi-measure rests, positioning
@cindex positioning multi-measure rests

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{positioning-multi-measure-rests.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{multi-measure-rest-markup.ly}

@seealso
Music Glossary:
@rglos{multi-measure rest}.

Notation Reference:
@ref{Durations},
@ref{Text},
@ref{Formatting text},
@ref{Text scripts}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{MultiMeasureRest},
@rinternals{MultiMeasureRestNumber},
@rinternals{MultiMeasureRestText}.

@cindex fingerings and multi-measure rests
@cindex multi-measure rests and fingerings

@knownissues
Fingerings over multi-measure rests (e.g. @code{R1*10-4}) may result
in the fingering numeral colliding with the bar counter
numeral.

@cindex condensing rests
@cindex rest, condensing ordinary

There is no way to automatically condense multiple ordinary rests
into a single multi-measure rest.

@cindex rest, collisions of

Multi-measure rests do not take part in rest collisions.


@node Displaying rhythms
@subsection Displaying rhythms

@menu
* Time signature::
* Metronome marks::
* Upbeats::
* Unmetered music::
* Polymetric notation::
* Automatic note splitting::
* Showing melody rhythms::
@end menu

@node Time signature
@unnumberedsubsubsec Time signature

@cindex time signature
@cindex meter

@funindex \time
@funindex time

The time signature is set as follows:

@lilypond[quote,verbatim,relative=2]
\time 2/4 c2
\time 3/4 c2.
@end lilypond

@cindex time signature, visibility of

Time signatures are printed at the beginning of a piece
and whenever the time signature changes.  If a change takes place
at the end of a line a warning time signature sign is printed
there.  This default behavior may be changed, see
@ref{Visibility of objects}.

@lilypond[quote,verbatim,relative=2]
\time 2/4
c2 c
\break
c c
\break
\time 4/4
c c c c
@end lilypond

@cindex time signature style
@cindex meter style

@funindex \numericTimeSignature
@funindex numericTimeSignature
@funindex \defaultTimeSignature
@funindex defaultTimeSignature

The time signature symbol that is used in 2/2 and 4/4 time can be
changed to a numeric style:

@lilypond[quote,verbatim,relative=2]
% Default style
\time 4/4 c1
\time 2/2 c1
% Change to numeric style
\numericTimeSignature
\time 4/4 c1
\time 2/2 c1
% Revert to default style
\defaultTimeSignature
\time 4/4 c1
\time 2/2 c1
@end lilypond


Mensural time signatures are covered in
@ref{Mensural time signatures}.

@cindex time signature default settings
@cindex autobeaming properties for time signatures
@cindex beaming, time signature default properties
@funindex \overrideTimeSignatureSettings

In addition to setting the printed time signature, the @code{\time}
command also sets the values of the time-signature-based properties
@code{baseMoment}, @code{beatStructure}, and @code{beamExceptions}.
The predefined default values for these properties can be found in
@file{scm/time-signature-settings.scm}.

The default value of @code{beatStructure} can be overridden in the
@code{\time} command itself by supplying it as the optional first
argument:

@lilypond[quote,verbatim]
\score {
  \new Staff {
    \relative c' {
      \time #'(2 2 3) 7/8
      \repeat unfold 7 { c8 } |
      \time #'(3 2 2) 7/8
      \repeat unfold 7 { c8 } |
    }
  }
}
@end lilypond

Alternatively, the default values of all these time-signature-based
variables, including @code{baseMoment} and @code{beamExceptions},
can be set together.  The values can be set independently for several
different time signatures.  The new values take effect when a
subsequent @code{\time} command with the same value of the time
signature is executed:

@lilypond[quote,verbatim]
\score {
  \new Staff {
    \relative c' {
      \overrideTimeSignatureSettings
        4/4        % timeSignatureFraction
        1/4        % baseMomentFraction
        #'(3 1)    % beatStructure
        #'()       % beamExceptions
      \time 4/4
      \repeat unfold 8 { c8 } |
    }
  }
}
@end lilypond

@code{\overrideTimeSignatureSettings} takes four arguments:

@enumerate

@item
@code{@var{timeSignatureFraction}}, a fraction describing the
time signature to which these values apply.

@item
@code{@var{baseMomentFraction}}, a fraction containing the numerator
and denominator of the basic timing unit for the time signature.

@item
@code{@var{beatStructure}}, a Scheme list indicating the structure
of the beats in the measure, in units of the base moment.

@item
@code{@var{beamExceptions}}, an alist containing any beaming rules
for the time signature that go beyond ending at every beat, as
described in @ref{Setting automatic beam behavior}.
@end enumerate


@cindex time signature properties, restoring default values
@cindex restoring default properties for time signatures
@funindex \revertTimeSignatureSettings

Changed values of default time signature properties can be restored
to the original values:

@lilypond[quote,verbatim]
\score{
  \relative c' {
    \repeat unfold 8 { c8 } |
    \overrideTimeSignatureSettings
      4/4        % timeSignatureFraction
      1/4        % baseMomentFraction
      #'(3 1)    % beatStructure
      #'()       % beamExceptions
    \time 4/4
    \repeat unfold 8 { c8 } |
    \revertTimeSignatureSettings 4/4
    \time 4/4
    \repeat unfold 8 { c8 } |
  }
}
@end lilypond

Different values of default time signature properties can be established
for different staves by moving the @code{Timing_translator} and the
@code{Default_bar_line_engraver} from the @code{Score} context to the
@code{Staff} context.

@lilypond[quote, verbatim]
\score {
  \new StaffGroup <<
     \new Staff {
        \overrideTimeSignatureSettings
          4/4        % timeSignatureFraction
          1/4        % baseMomentFraction
          #'(3 1)    % beatStructure
          #'()       % beamExceptions
        \time 4/4
        \repeat unfold 8 {c''8}
     }
     \new Staff {
        \overrideTimeSignatureSettings
          4/4        % timeSignatureFraction
          1/4        % baseMomentFraction
          #'(1 3)    % beatStructure
          #'()       % beamExceptions
        \time 4/4
        \repeat unfold 8 {c''8}
     }
  >>
  \layout {
    \context {
      \Score
      \remove "Timing_translator"
      \remove "Default_bar_line_engraver"
    }
    \context {
      \Staff
      \consists "Timing_translator"
      \consists "Default_bar_line_engraver"
    }
  }
}
@end lilypond

A further method of changing these time-signature-related variables,
which avoids reprinting the time signature at the time of the change,
is shown in @ref{Setting automatic beam behavior}.

@predefined
@code{\numericTimeSignature},
@code{\defaultTimeSignature}.
@endpredefined


@snippets
@lilypondfile[verbatim,quote,texidoc,doctitle]
{time-signature-printing-only-the-numerator-as-a-number-instead-of-the-fraction.ly}

@seealso
Music Glossary:
@rglos{time signature}

Notation Reference:
@ref{Mensural time signatures},
@ref{Setting automatic beam behavior},
@ref{Time administration}.

Installed Files:
@file{scm/time-signature-settings.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TimeSignature},
@rinternals{Timing_translator}.


@node Metronome marks
@unnumberedsubsubsec Metronome marks

@cindex tempo
@cindex beats per minute
@cindex metronome mark
@cindex metronome marking with text

@funindex \tempo
@funindex tempo

A basic metronome mark is simple to write:

@lilypond[verbatim,quote,relative=1]
\tempo 4 = 120
c2 d
e4. d8 c2
@end lilypond

Metronome marks may also be printed as a range of two numbers:

@lilypond[verbatim,quote,relative=1]
\tempo 4 = 40 - 46
c4. e8 a4 g
b,2 d4 r
@end lilypond

Tempo indications with text can be used instead:

@lilypond[verbatim,quote,relative=2]
\tempo "Allegretto"
c4 e d c
b4. a16 b c4 r4
@end lilypond

Combining a metronome mark and text will automatically place the
metronome mark within parentheses:

@lilypond[verbatim,quote,relative=2]
\tempo "Allegro" 4 = 160
g4 c d e
d4 b g2
@end lilypond

In general, the text can be any markup object:

@lilypond[verbatim,quote,relative=2]
\tempo \markup { \italic Faster } 4 = 132
a8-. r8 b-. r gis-. r a-. r
@end lilypond

A parenthesized metronome mark with no textual indication may be
written by including an empty string in the input:

@lilypond[verbatim,quote,relative=2]
\tempo "" 8 = 96
d4 g e c
@end lilypond

@funindex \markLengthOn
@funindex markLengthOn
@funindex \markLengthOff
@funindex markLengthOff

In a part for an instrument with long periods of rests,
tempo indications sometimes follow each other closely.
The command @code{\markLengthOn} provides extra horizontal space
to prevent tempo indications from overlapping, and @code{\markLengthOff}
restores the default behavior of ignoring tempo marks
for horizontal spacing.

@lilypond[verbatim,quote,relative=0]
\compressFullBarRests
\markLengthOn
\tempo "Molto vivace"
R1*12
\tempo "Meno mosso"
R1*16
\markLengthOff
\tempo "Tranquillo"
R1*20
@end lilypond

@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{printing-metronome-and-rehearsal-marks-below-the-staff.ly}

@c perhaps also an example of how to move it horizontally?

@lilypondfile[verbatim,quote,texidoc,doctitle]
{changing-the-tempo-without-a-metronome-mark.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{creating-metronome-marks-in-markup-mode.ly}

For more details, see @ref{Formatting text}.

@seealso
Music Glossary:
@rglos{metronome},
@rglos{metronomic indication},
@rglos{tempo indication},
@rglos{metronome mark}.

Notation Reference:
@ref{Formatting text},
@ref{MIDI output}.

Snippets:
@rlsr{Staff notation}.

Internals Reference:
@rinternals{MetronomeMark}.


@node Upbeats
@unnumberedsubsubsec Upbeats

@cindex anacrusis
@cindex upbeat
@cindex partial measure
@cindex measure, partial
@cindex measure, pickup
@cindex pickup measure

@funindex measurePosition
@funindex \partial
@funindex partial

Partial or pick-up measures, such as an @emph{anacrusis} or an
@emph{upbeat}, are entered using the @code{\partial} command,

@example
\partial @var{duration}
@end example

@noindent
where @code{@var{duration}} is the @emph{remaining} length of the
partial measure @emph{before} the start of the next full measure.

@lilypond[quote,verbatim,relative=1]
\time 3/4
\partial 8
e8 | a4 c8 b c4 |
@end lilypond

The @var{duration} can be any value less than a full measure:

@lilypond[quote,verbatim,relative=1]
\time 3/4
\partial 4.
r4 e8 | a4 c8 b c4 |
@end lilypond

@code{\partial @var{duration}} can also be written as:

@example
\set Timing.measurePosition -@var{duration}
@end example

So the first example above could be written:

@lilypond[quote,verbatim,relative=1]
\time 3/4
\set Timing.measurePosition = #(ly:make-moment -1/8)
e8 | a4 c8 b c4 |
@end lilypond

The property @code{measurePosition} contains a rational number,
which is usually positive and indicates how much of the measure
has passed at this point.  @code{\partial @var{duration}} is
defined such that no numbered bar gets created: when used at the
beginning of a measure, @code{measurePosition} is set to a
negative number, implying that the current bar will be
@emph{preceded} by additional material.  When used after a measure
has already started, however, it moves the requested distance
before the @emph{end} of the bar.

@lilypond[quote,verbatim,relative=1]
\set Score.barNumberVisibility = #all-bar-numbers-visible
\override Score.BarNumber.break-visibility =
          #end-of-line-invisible
\time 6/8
\partial 8
e8 | a4 c8 b[ c b] |
\partial 4
r8 e,8 | a4 \bar "||"
\partial 4
r8 e8 | a4
c8 b[ c b] |
@end lilypond


@seealso
Music Glossary:
@rglos{anacrusis}.

Notation Reference:
@ref{Grace notes}.

Snippets:
@rlsr{Rhythms}.

Internal Reference:
@rinternals{Timing_translator}.


@node Unmetered music
@unnumberedsubsubsec Unmetered music

@cindex cadenza
@cindex cadenza, beams
@cindex cadenza, accidentals
@cindex cadenza, bar lines
@cindex cadenza, bar numbers
@cindex unmetered music
@cindex unmetered music, beams
@cindex unmetered music, accidentals
@cindex unmetered music, bar lines
@cindex unmetered music, bar numbers
@cindex accidentals, cadenzas
@cindex accidentals, unmetered music
@cindex bar lines, cadenzas
@cindex bar lines, unmetered music
@cindex bar numbers, cadenzas
@cindex bar numbers, unmetered music
@cindex beams, cadenzas
@cindex beams, unmetered music

@funindex \cadenzaOn
@funindex cadenzaOn
@funindex \cadenzaOff
@funindex cadenzaOff

In metered music bar lines are inserted and bar numbers are calculated
automatically. In unmetered music (i.e. cadenzas), this is not
desirable and can be @q{switched off} using the command
@code{\cadenzaOn}, then @q{switched back on} at the appropriate place
using @code{\cadenzaOff}.

@lilypond[verbatim,relative=2,quote]
c4 d e d
\cadenzaOn
c4 c d8[ d d] f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

Bar numbering is resumed at the end of the cadenza.

@lilypond[verbatim,relative=2,quote]
% Show all bar numbers
\override Score.BarNumber.break-visibility = #all-visible
c4 d e d
\cadenzaOn
c4 c d8[ d d] f4 g4.
\cadenzaOff
\bar "|"
d4 e d c
@end lilypond

Inserting a @code{\bar} command within a cadenza does not start a new
measure, even if a bar line is printed.  So any accidentals -- which
are usually assumed to remain in force until the end of the measure --
will still be valid after the bar line printed by @code{\bar}.  If
subsequent accidentals should be printed, forced accidentals or
reminder accidentals need to be inserted manually, see
@ref{Accidentals}.

@lilypond[verbatim,relative=2,quote]
c4 d e d
\cadenzaOn
cis4 d cis d
\bar "|"
% First cis is printed without alteration even if it's after a \bar
cis4 d cis! d
\cadenzaOff
\bar "|"
@end lilypond

Automatic beaming is disabled by @code{\cadenzaOn}. Therefore, all
beaming in cadenzas must be entered manually. See @ref{Manual beams}.

@lilypond[verbatim,relative=2,quote]
\repeat unfold 8 { c8 }
\cadenzaOn
cis8 c c c c
\bar"|"
c8 c c
\cadenzaOff
\repeat unfold 8 { c8 }
@end lilypond

These predefined commands affect all staves in the score, even when
placed in just one @code{Voice} context.  To change this, move the
@code{Timing_translator} from the @code{Score} context to the
@code{Staff} context.  See @ref{Polymetric notation}.

@predefined
@code{\cadenzaOn},
@code{\cadenzaOff}.
@endpredefined

@seealso
Music Glossary:
@rglos{cadenza}.

Notation Reference:
@ref{Visibility of objects},
@ref{Polymetric notation},
@ref{Manual beams},
@ref{Accidentals}.

Snippets:
@rlsr{Rhythms}.

@cindex cadenza, line breaks
@cindex cadenza, page breaks
@cindex unmetered music, line breaks
@cindex unmetered music, page breaks
@cindex breaks in unmetered music
@cindex line breaks, cadenzas
@cindex page breaks, cadenzas
@cindex line breaks, unmetered music
@cindex page breaks, unmetered music

@knownissues
Automatic line and page breaks are inserted only at bar lines, so
@q{invisible} bar lines will need to be inserted manually in long
stretches of unmetered music to permit breaking:

@example
\bar ""
@end example


@node Polymetric notation
@unnumberedsubsubsec Polymetric notation

@c This section necessarily uses \set
@c This is acceptable  -td

@cindex double time signatures
@cindex signatures, polymetric
@cindex time signatures, polymetric
@cindex time signatures, double
@cindex polymetric signatures
@cindex meter, polymetric

@funindex timeSignatureFraction
@funindex \scaleDurations
@funindex scaleDurations
@funindex \tuplet
@funindex tuplet

Polymetric notation is supported explicitly or by manually modifying the
visible time signature symbol and/or scaling note durations.

@subsubsubheading Different time signatures with equal-length measures

Set a common time signature for each staff, and set the
@code{timeSignatureFraction} to the desired fraction.  Then use the
@code{\scaleDurations} function to scale the durations of the notes in
each staff to the common time signature.

@cindex beams, with polymetric meters
@cindex polymetric meters, with beams

In the following example, music with the time signatures of 3/4, 9/8 and
10/8 are used in parallel.  In the second staff, shown durations are
multiplied by 2/3 (because 2/3 * 9/8 = 3/4) and in the third staff, the
shown durations are multiplied by 3/5 (because 3/5 * 10/8 = 3/4).  It
may be necessary to insert beams manually, as the duration scaling will
affect the autobeaming rules.

@lilypond[quote,verbatim]
\relative c' <<
  \new Staff {
    \time 3/4
    c4 c c |
    c4 c c |
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = 9/8
    \scaleDurations 2/3
      \repeat unfold 6 { c8[ c c] }
  }
  \new Staff {
    \time 3/4
    \set Staff.timeSignatureFraction = 10/8
    \scaleDurations 3/5 {
      \repeat unfold 2 { c8[ c c] }
      \repeat unfold 2 { c8[ c] } |
      c4. c \tuplet 3/2 { c8[ c c] } c4
    }
  }
>>
@end lilypond

@subsubsubheading Different time signatures with unequal-length measures

Each staff can be given its own independent time signature by
moving the @code{Timing_translator} and the
@code{Default_bar_line_engraver} to the @code{Staff} context.

@lilypond[quote,verbatim]
\layout {
  \context {
    \Score
    \remove "Timing_translator"
    \remove "Default_bar_line_engraver"
  }
  \context {
    \Staff
    \consists "Timing_translator"
    \consists "Default_bar_line_engraver"
  }
}

% Now each staff has its own time signature.

\relative c' <<
  \new Staff {
    \time 3/4
    c4 c c |
    c4 c c |
  }
  \new Staff {
    \time 2/4
    c4 c |
    c4 c |
    c4 c |
  }
  \new Staff {
    \time 3/8
    c4. |
    c8 c c |
    c4. |
    c8 c c |
  }
>>
@end lilypond

@funindex \compoundMeter
@cindex compound time signatures
@cindex time signature, compound

@subsubsubheading Compound time signatures

These are created using the @code{\compoundMeter} function.  The syntax
for this is:

@example
\compoundMeter #'@code{(list of lists)}
@end example

The simplest construction is a single list, where the @emph{last} number
indicates the bottom number of the time signature and those that come
before it, the top numbers.

@lilypond[quote,verbatim]
\relative c' {
  \compoundMeter #'((2 2 2 8))
  \repeat unfold 6 c8 \repeat unfold 12 c16
}
@end lilypond

More complex meters can be constructed using additional lists.  Also,
automatic beaming settings will be adjusted depending on the values.

@lilypond[quote,verbatim]
\relative c' {
  \compoundMeter #'((1 4) (3 8))
  \repeat unfold 5 c8 \repeat unfold 10 c16
}

\relative c' {
  \compoundMeter #'((1 2 3 8) (3 4))
  \repeat unfold 12 c8
}
@end lilypond

@seealso
Music Glossary:
@rglos{polymetric},
@rglos{polymetric time signature},
@rglos{meter}.

Notation Reference:
@ref{Automatic beams},
@ref{Manual beams},
@ref{Time signature},
@ref{Scaling durations}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{TimeSignature},
@rinternals{Timing_translator},
@rinternals{Default_bar_line_engraver},
@rinternals{Staff}.

@knownissues
When using different time signatures in parallel, notes at the same
moment will be placed at the same horizontal location.  However, the bar
lines in the different staves will cause the note spacing to be less
regular in each of the individual staves than would be normal without
the different time signatures.


@node Automatic note splitting
@unnumberedsubsubsec Automatic note splitting

@cindex notes, splitting
@cindex splitting notes
@cindex rests, splitting
@cindex splitting rests

@funindex Note_heads_engraver
@funindex Completion_heads_engraver
@funindex Completion_rest_engraver

Long notes which overrun bar lines can be converted automatically to
tied notes.  This is done by replacing the @code{Note_heads_engraver}
with the @code{Completion_heads_engraver}.  Similarly, long rests which
overrun bar lines are split automatically by replacing the
@code{Rest_engraver} with the @code{Completion_rest_engraver}.  In the
following example, notes and rests crossing the bar lines are split,
notes are also tied.

@lilypond[quote,verbatim,relative=1]
\new Voice \with {
  \remove "Note_heads_engraver"
  \consists "Completion_heads_engraver"
  \remove "Rest_engraver"
  \consists "Completion_rest_engraver"
}

{ c2. c8 d4 e f g a b c8 c2 b4 a g16 f4 e d c8. c2 r1*2 }
@end lilypond

These engravers split all running notes and rests at the bar line, and
inserts ties for notes.  One of its uses is to debug complex scores: if
the measures are not entirely filled, then the ties show exactly how
much each measure is off.

The property @code{completionUnit} sets a preferred duration for
the split notes.

@lilypond[quote,verbatim,relative=2]
\new Voice \with {
  \remove "Note_heads_engraver"
  \consists "Completion_heads_engraver"
} {
  \time 9/8 g\breve. d4. \bar "||"
  \set completionUnit = #(ly:make-moment 3 8)
  g\breve. d4.
}
@end lilypond

These engravers split notes with scaled duration, such as those in tuplets,
into notes with the same scale-factor as in the input note.

@lilypond[quote,verbatim,relative=2]
\new Voice \with {
  \remove "Note_heads_engraver"
  \consists "Completion_heads_engraver"
} {
  \time 2/4 r4
  \tuplet 3/2 {g4 a b}
  \scaleDurations 2/3 {g a b}
  g4*2/3 a b
  \tuplet 3/2 {g4 a b}
  r4
}
@end lilypond

@seealso
Music Glossary:
@rglos{tie}

Learning Manual:
@rlearning{Engravers explained},
@rlearning{Adding and removing engravers}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Note_heads_engraver},
@rinternals{Completion_heads_engraver},
@rinternals{Rest_engraver},
@rinternals{Completion_rest_engraver},
@rinternals{Forbid_line_break_engraver}.

@knownissues
For consistency with previous behavior, notes and rests with
duration longer than a measure, such as @code{c1*2}, are split into
notes without any scale factor, @code{@{ c1 c1 @}}.  The property
@code{completionFactor} controls this behavior, and setting it to
@code{#f} cause split notes and rest to have the scale factor
of the input durations.


@node Showing melody rhythms
@unnumberedsubsubsec Showing melody rhythms

@cindex melody rhythms, showing
@cindex rhythms, showing melody

Sometimes you might want to show only the rhythm of a melody.  This
can be done with the rhythmic staff.  All pitches of notes on such a
staff are squashed, and the staff itself has a single line

@lilypond[quote,relative=1,verbatim]
<<
  \new RhythmicStaff {
    \new Voice = "myRhythm" {
      \time 4/4
      c4 e8 f g2
      r4 g g f
      g1
    }
  }
  \new Lyrics {
    \lyricsto "myRhythm" {
      This is my song
      I like to sing
    }
  }
>>
@end lilypond

@cindex guitar chord charts
@cindex strumming rhythms, showing
@cindex guitar strumming rhythms, showing

@funindex Pitch_squash_engraver
@funindex \improvisationOn
@funindex improvisationOn
@funindex \improvisationOff
@funindex improvisationOff

Guitar chord charts often show the strumming rhythms.  This can
be done with the @code{Pitch_squash_engraver} and
@code{\improvisationOn}.


@lilypond[quote,verbatim]
<<
  \new ChordNames {
    \chordmode {
      c1 f g c
    }
  }
  \new Voice \with {
    \consists "Pitch_squash_engraver"
  } \relative c'' {
    \improvisationOn
    c4 c8 c c4 c8 c
    f4 f8 f f4 f8 f
    g4 g8 g g4 g8 g
    c4 c8 c c4 c8 c
  }
>>
@end lilypond


@predefined
@code{\improvisationOn},
@code{\improvisationOff}.
@endpredefined


@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{guitar-strum-rhythms.ly}

@seealso
Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{RhythmicStaff},
@rinternals{Pitch_squash_engraver}.


@node Beams
@subsection Beams

@menu
* Automatic beams::
* Setting automatic beam behavior::
* Manual beams::
* Feathered beams::
@end menu

@node Automatic beams
@unnumberedsubsubsec Automatic beams

By default, beams are inserted automatically:

@cindex beams, manual
@cindex manual beams
@cindex beams, customizing rules

@funindex \autoBeamOn
@funindex autoBeamOn
@funindex \autoBeamOff
@funindex autoBeamOff

@lilypond[quote,verbatim,relative=2]
\time 2/4 c8 c c c
\time 6/8 c8 c c c8. c16 c8
@end lilypond

If these automatic decisions are not satisfactory, beaming can be
entered explicitly; see @ref{Manual beams}.  Beams @emph{must} be
entered manually if beams are to be extended over rests.

If automatic beaming is not required, it may be turned off with
@code{\autoBeamOff} and on with @code{\autoBeamOn}:

@lilypond[quote,relative=1,verbatim]
c4 c8 c8. c16 c8. c16 c8
\autoBeamOff
c4 c8 c8. c16 c8.
\autoBeamOn
c16 c8
@end lilypond

@cindex melismata, with beams
@cindex beams, with melismata

@warning{If beams are used to indicate melismata in songs, then
automatic beaming should be switched off with @code{@bs{}autoBeamOff}
and the beams indicated manually.  Using @code{@bs{}partcombine} with
@code{@bs{}autoBeamOff} can produce unintended results.  See the
snippets for more information.}

Beaming patterns that differ from the automatic defaults can be
created; see @ref{Setting automatic beam behavior}.

@predefined
@code{\autoBeamOff},
@code{\autoBeamOn}.
@endpredefined

@cindex beams, line breaks
@cindex line breaks, beams
@cindex beams, with knee gap
@cindex knee gap, with beams
@funindex breakable

@snippets
@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{beams-across-line-breaks.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{changing-beam-knee-gap.ly}

@cindex beams, \partcombine with \autoBeamOff
@cindex voices, \partcombine with \autoBeamOff

@lilypondfile [verbatim, quote, ragged-right, texidoc, doctitle]
{partcombine-and-autobeamoff.ly}

@seealso
Notation Reference:
@ref{Manual beams},
@ref{Setting automatic beam behavior}.

Installed Files:
@file{scm/auto-beam.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Auto_beam_engraver},
@rinternals{Beam_engraver},
@rinternals{Beam},
@rinternals{BeamEvent},
@rinternals{BeamForbidEvent},
@rinternals{beam-interface},
@rinternals{unbreakable-spanner-interface}.

@knownissues
The properties of a beam are determined at the @emph{start} of its
construction and any additional beam-property changes that occur before
the beam has been completed will not take effect until the @emph{next},
new beam starts.


@node Setting automatic beam behavior
@unnumberedsubsubsec Setting automatic beam behavior

@cindex beams, with lyrics
@cindex lyrics, with beams

@funindex autoBeaming
@funindex baseMoment
@funindex beamExceptions
@funindex \beamExceptions
@funindex beatStructure
@funindex measureLength
@funindex \time
@funindex time
@funindex \set
@funindex set

When automatic beaming is enabled, the placement of automatic beams
is determined by three context properties:
@code{baseMoment}, @code{beatStructure}, and @code{beamExceptions}.
The default values of these variables may be overridden as described
below, or alternatively the default values themselves may be changed
as explained in @ref{Time signature}.

If a @code{beamExceptions} rule is defined for the time signature in
force, that rule alone is used to determine the beam placement; the
values of @code{baseMoment} and @code{beatStructure} are ignored.

If no @code{beamExceptions} rule is defined for the time signature
in force, the beam placement is determined by the values of
@code{baseMoment} and @code{beatStructure}.


@subsubsubheading Beaming based on @code{baseMoment} and @code{beatStructure}

By default, @code{beamExceptions} rules are defined for most common
time signatures, so the @code{beamExceptions} rules must be disabled
if automatic beaming is to be based on @code{baseMoment} and
@code{beatStructure}.  The @code{beamExceptions} rules are disabled
by

@example
\set Timing.beamExceptions = #'()
@end example

When @code{beamExceptions} is set to @code{#'()}, either due to an
explicit setting or because no @code{beamExceptions} rules are defined
internally for the time signature in force, the ending points for
beams are on beats as specified by the context properties
@code{baseMoment} and @code{beatStructure}.  @code{beatStructure} is
a scheme list that defines the length of each beat in the measure in
units of @code{baseMoment}.  By default, @code{baseMoment} is one
over the denominator of the time signature.  By default, each unit of
length @code{baseMoment} is a single beat.

@lilypond[quote,relative=2,verbatim]
\time 5/16
c16^"default" c c c c |
% beamExceptions are unlikely to be defined for 5/16 time,
% but let's disable them anyway to be sure
\set Timing.beamExceptions = #'()
\set Timing.beatStructure = #'(2 3)
c16^"(2+3)" c c c c |
\set Timing.beatStructure = #'(3 2)
c16^"(3+2)" c c c c |
@end lilypond

@lilypond[quote,relative=2,verbatim]
\time 4/4
a8^"default" a a a a a a a
% Disable beamExceptions because they are definitely
% defined for 4/4 time
\set Timing.beamExceptions = #'()
\set Timing.baseMoment = #(ly:make-moment 1/4)
\set Timing.beatStructure = #'(1 1 1 1)
a8^"changed" a a a a a a a
@end lilypond

Beam setting changes can be limited to specific contexts.  If no
setting is included in a lower-level context, the setting of the
enclosing context will apply.

@lilypond[quote, verbatim,relative=1]
\new Staff {
  \time 7/8
  % No need to disable beamExceptions
  % as they are not defined for 7/8 time
  \set Staff.beatStructure = #'(2 3 2)
  <<
    \new Voice = one {
      \relative c'' {
        a8 a a a a a a
      }
    }
    \new Voice = two {
      \relative c' {
        \voiceTwo
        \set Voice.beatStructure = #'(1 3 3)
        f8 f f f f f f
      }
    }
  >>
}
@end lilypond

When multiple voices are used the @code{Staff} context must be
specified if the beaming is to be applied to all voices in the
staff:

@lilypond[quote,verbatim,relative=2]
\time 7/8
% rhythm 3-1-1-2
% Change applied to Voice by default --  does not work correctly
% Because of autogenerated voices, all beating will
% be at baseMoment (1 . 8)
\set beatStructure = #'(3 1 1 2)
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>

% Works correctly with context Staff specified
\set Staff.beatStructure = #'(3 1 1 2)
<< {a8 a a a16 a a a a8 a} \\ {f4. f8 f f f} >>
@end lilypond

The value of @code{baseMoment} can be adjusted to change
the beaming behavior, if desired. When this is done,
the value of @code{beatStructure} must be set to be
compatible with the new value of @code{baseMoment}.

@lilypond[quote,verbatim,relative=2]
\time 5/8
% No need to disable beamExceptions
% as they are not defined for 5/8 time
\set Timing.baseMoment = #(ly:make-moment 1/16)
\set Timing.beatStructure = #'(7 3)
\repeat unfold 10 { a16 }
@end lilypond

@code{baseMoment} is a @i{moment}; a unit of musical duration.  A
quantity of type @i{moment} is created by the scheme function
@code{ly:make-moment}.  For more information about this function,
see @ref{Time administration}.

By default @code{baseMoment} is set to one over the denominator of
the time signature. Any exceptions to this default can be found in
@file{scm/time-signature-settings.scm}.

@subsubsubheading Beaming based on @code{beamExceptions}

Special autobeaming rules (other than ending a beam on a beat)
are defined in the @code{beamExceptions} property.

The value for @code{beamExceptions}, a somewhat complex Scheme
data structure, is easiest generated with the
@code{\beamExceptions} function.  This function is given one or
more manually beamed measure-length rhythmic patterns (measures
have to be separated by a bar check@tie{}@code{|} since the
function has no other way to discern the measure length).  Here is
a simple example:

@lilypond[quote,relative=2,verbatim]
\time 3/16
\set Timing.beatStructure = #'(2 1)
\set Timing.beamExceptions =
  \beamExceptions { 32[ 32] 32[ 32] 32[ 32] }
c16 c c |
\repeat unfold 6 { c32 } |
@end lilypond

@warning{A @code{beamExceptions} value must be @emph{complete}
exceptions list.  That is, every exception that should be applied
must be included in the setting.  It is not possible to add, remove,
or change only one of the exceptions. While this may seem cumbersome,
it means that the current beaming settings need not be known in order
to specify a new beaming pattern.}

When the time signature is changed, default values of
@code{Timing.baseMoment}, @code{Timing.beatStructure},
and @code{Timing.beamExceptions} are set.  Setting the time signature
will reset the automatic beaming settings for the @code{Timing}
context to the default behavior.

@lilypond[quote,verbatim,relative=2]
\time 6/8
\repeat unfold 6 { a8 }
% group (4 + 2)
\set Timing.beatStructure = #'(4 2)
\repeat unfold 6 { a8 }
% go back to default behavior
\time 6/8
\repeat unfold 6 { a8 }
@end lilypond

The default automatic beaming settings for a time signature
are determined in @file{scm/time-signature-settings.scm}.
Changing the default automatic beaming settings
for a time signature is described in @ref{Time signature}.

Many automatic beaming settings for a time signature contain an
entry for @code{beamExceptions}.  For example, 4/4 time tries to
beam the measure in two if there are only eighth notes.  The
@code{beamExceptions} rule can override the @code{beatStructure} setting
if @code{beamExceptions} is not reset.

@lilypond[quote,verbatim,relative=2]
\time 4/4
\set Timing.baseMoment = #(ly:make-moment 1/8)
\set Timing.beatStructure = #'(3 3 2)
% This won't beam (3 3 2) because of beamExceptions
\repeat unfold 8 {c8} |
% This will beam (3 3 2) because we clear beamExceptions
\set Timing.beamExceptions = #'()
\repeat unfold 8 {c8}
@end lilypond

In a similar fashion, eighth notes in 3/4 time are beamed as a full
measure by default.  To beam eighth notes in 3/4 time on the beat,
reset @code{beamExceptions}.

@lilypond[quote,verbatim,relative=2]
\time 3/4
% by default we beam in (6) due to beamExceptions
\repeat unfold 6 {a8} |
% This will beam (1 1 1) due to default baseMoment and beatStructure
\set Timing.beamExceptions = #'()
\repeat unfold 6 {a8}
@end lilypond

In engraving from the Romantic and Classical periods,
beams often begin midway through the measure in 3/4 time,
but modern practice is to avoid the false impression of 6/8 time
(see Gould, p. 153).  Similar situations arise in 3/8 time.
This behavior is controlled by the context property @code{beamHalfMeasure},
which has effect only in time signatures with 3 in the numerator:

@lilypond[quote,verbatim,relative=2]
\time 3/4
r4. a8 a a |
\set Timing.beamHalfMeasure = ##f
r4. a8 a a |
@end lilypond

@subsubsubheading How automatic beaming works

When automatic beaming is enabled, the placement of automatic beams
is determined by the context properties
@code{baseMoment}, @code{beatStructure}, and @code{beamExceptions}.

The following rules, in order of priority, apply when determining
the appearance of beams:

@itemize
@item
If a manual beam is specified with @code{[@dots{}]} set the beam
as specified, otherwise

@item
if a beam-ending rule is defined in @code{beamExceptions}
for the beam-type, use it to determine the valid places where
beams may end, otherwise

@item
if a beam-ending rule is defined in @code{beamExceptions}
for a longer beam-type, use it to determine the valid places
where beams may end, otherwise

@item
use the values of @code{baseMoment} and @code{beatStructure} to
determine the ends of the beats in the measure, and
end beams at the end of beats.

@end itemize

In the rules above, the @emph{beam-type} is the duration of the
shortest note in the beamed group.

The default beaming rules can be found in
@file{scm/time-signature-settings.scm}.

@snippets

@cindex beams, subdividing

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{subdividing-beams.ly}

@cindex beamlets, orienting

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{strict-beat-beaming.ly}

@cindex measure groupings
@cindex beats, grouping
@cindex grouping beats
@cindex measure sub-grouping

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{conducting-signs,-measure-grouping-signs.ly}

@cindex beam, endings in a score
@cindex beam, endings with multiple voices

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{beam-endings-in-score-context.ly}

@seealso
Notation Reference:
@ref{Time signature}.

Installed Files:
@file{scm/time-signature-settings.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Auto_beam_engraver},
@rinternals{Beam},
@rinternals{BeamForbidEvent},
@rinternals{beam-interface}.

@knownissues
If a score ends while an automatic beam has not been ended and is
still accepting notes, this last beam will not be typeset at all.
The same holds for polyphonic voices, entered with
@code{<< @dots{} \\ @dots{} >>}.  If a polyphonic voice ends while an
automatic beam is still accepting notes, it is not typeset.
The workaround for these problems is to manually beam the last
beam in the voice or score.

By default, the @code{Timing} translator is aliased to the
@code{Score} context.  This means that setting the time signature
in one staff will affect the beaming of the other staves as well.
Thus, a time signature setting in a later staff will reset custom
beaming that was set in an earlier staff.
One way to avoid this problem is to set the time signature
in only one staff.

@lilypond[quote,verbatim,relative=2]
<<
  \new Staff {
    \time 3/4
    \set Timing.baseMoment = #(ly:make-moment 1/8)
    \set Timing.beatStructure = #'(1 5)
    \repeat unfold 6 { a8 }
  }
  \new Staff {
    \repeat unfold 6 { a8 }
  }
>>
@end lilypond

The default beam settings for the time signature can also be changed, so
that the desired beaming will always be used.  Changes in automatic
beaming settings for a time signature are described in
@ref{Time signature}.

@lilypond[quote,verbatim,relative=2]
<<
  \new Staff {
    \overrideTimeSignatureSettings
      3/4               % timeSignatureFraction
      1/8               % baseMomentFraction
      #'(1 5)           % beatStructure
      #'()		% beamExceptions
    \time 3/4
    \repeat unfold 6 { a8 }
  }
  \new Staff {
    \time 3/4
    \repeat unfold 6 { a8 }
  }
>>
@end lilypond


@node Manual beams
@unnumberedsubsubsec Manual beams

@cindex beams, manual
@cindex manual beams

@funindex ]
@funindex [

In some cases it may be necessary to override the automatic
beaming algorithm.  For example, the autobeamer will not put beams
over rests or bar lines, and in choral scores the beaming is
often set to follow the meter of the lyrics rather than the
notes.  Such beams can be specified manually by
marking the begin and end point with @code{[} and @code{]}.

@lilypond[quote,relative=1,verbatim]
r4 r8[ g' a r] r g[ | a] r
@end lilypond

@cindex manual beams, direction shorthand for
@cindex manual beams, grace notes

Beaming direction can be set manually using direction indicators:

@lilypond[quote,relative=2,verbatim]
c8^[ d e] c,_[ d e f g]
@end lilypond

@funindex \noBeam
@funindex noBeam

Individual notes may be marked with @code{\noBeam} to prevent them
from being beamed:

@lilypond[quote,verbatim,relative=2]
\time 2/4
c8 c\noBeam c c
@end lilypond

Grace note beams and normal note beams can occur simultaneously.
Unbeamed grace notes are not put into normal note beams.

@lilypond[quote,verbatim,relative=2]
c4 d8[
\grace { e32 d c d }
e8] e[ e
\grace { f16 }
e8 e]
@end lilypond

@funindex stemLeftBeamCount
@funindex stemRightBeamCount

Even more strict manual control with the beams can be achieved by
setting the properties @code{stemLeftBeamCount} and
@code{stemRightBeamCount}.  They specify the number of beams to
draw on the left and right side, respectively, of the next note.
If either property is set, its value will be used only once, and
then it is erased.  In this example, the last @code{f} is printed
with only one beam on the left side, i.e., the eighth-note beam of
the group as a whole.

@lilypond[quote,relative=2,verbatim]
a8[ r16 f g a]
a8[ r16
\set stemLeftBeamCount = #2
\set stemRightBeamCount = #1
f16
\set stemLeftBeamCount = #1
g16 a]
@end lilypond


@predefined
@code{\noBeam}.
@endpredefined


@snippets

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{flat-flags-and-beam-nibs.ly}

@seealso
Notation Reference:
@ref{Direction and placement},
@ref{Grace notes}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Beam},
@rinternals{BeamEvent},
@rinternals{Beam_engraver},
@rinternals{beam-interface},
@rinternals{Stem_engraver}.


@node Feathered beams
@unnumberedsubsubsec Feathered beams

@cindex beams, feathered
@cindex feathered beams

@funindex \featherDurations
@funindex featherDurations
@funindex grow-direction

Feathered beams are used to indicate that a small group of notes
should be played at an increasing (or decreasing) tempo, without
changing the overall tempo of the piece.  The extent of the
feathered beam must be indicated manually using @code{[} and
@code{]}, and the beam feathering is turned on by specifying a
direction to the @code{Beam} property @code{grow-direction}.

If the placement of the notes and the sound in the MIDI output is to
reflect the @emph{ritardando} or @emph{accelerando} indicated by the
feathered beam the notes must be grouped as a music expression delimited
by braces and preceded by a @code{featherDurations} command which specifies
the ratio between the durations of the first and last notes in the
group.

The square brackets show the extent of the beam and the braces show
which notes are to have their durations modified.  Normally these
would delimit the same group of notes, but this is not required: the
two commands are independent.

In the following example the eight 16th notes occupy exactly the
same time as a half note, but the first note is one half as long
as the last one, with the intermediate notes gradually
lengthening.  The first four 32nd notes gradually speed up, while
the last four 32nd notes are at a constant tempo.

@lilypond[relative=1,verbatim,quote]
\override Beam.grow-direction = #LEFT
\featherDurations #(ly:make-moment 2/1)
{ c16[ c c c c c c c] }
\override Beam.grow-direction = #RIGHT
\featherDurations #(ly:make-moment 2/3)
{ c32[ d e f] }
% revert to non-feathered beams
\override Beam.grow-direction = #'()
{ g32[ a b c] }
@end lilypond

@noindent
The spacing in the printed output represents the
note durations only approximately, but the MIDI output is exact.

@predefined
@code{\featherDurations}.
@endpredefined

@seealso
Snippets:
@rlsr{Rhythms}.

@knownissues
The @code{\featherDurations} command only works with very short
music snippets, and when numbers in the fraction are small.


@node Bars
@subsection Bars

@menu
* Bar lines::
* Bar numbers::
* Bar and bar number checks::
* Rehearsal marks::
@end menu

@node Bar lines
@unnumberedsubsubsec Bar lines

@cindex bar lines
@cindex measure lines
@cindex closing bar lines
@cindex bar lines, closing
@cindex double bar lines
@cindex bar lines, double
@cindex repeat bars

@funindex \bar
@funindex bar

Bar lines delimit measures, and are also used to indicate
repeats.  Normally, simple bar lines are automatically inserted
into the printed output at places based on the current time
signature.

The simple bar lines inserted automatically can be changed to
other types with the @code{\bar} command.  For example, a closing
double bar line is usually placed at the end of a piece:

@lilypond[quote,relative=1,verbatim]
e4 d c2 \bar "|."
@end lilypond

It is not invalid if the final note in a measure does not
end on the automatically entered bar line: the note is assumed
to carry over into the next measure.  But if a long sequence
of such carry-over measures appears the music can appear compressed
or even flowing off the page.  This is because automatic line
breaks happen only at the end of complete measures, i.e., where
all notes end before the end of a measure.

@warning{An incorrect duration can cause line breaks to be
inhibited, leading to a line of highly compressed music or
music which flows off the page.}

@cindex line breaks
@cindex bar lines, invisible
@cindex measure lines, invisible

Line breaks are also permitted at manually inserted bar lines
even within incomplete measures.  To allow a line break without
printing a bar line, use the following:

@example
\bar ""
@end example

@noindent
This will insert an invisible bar line and allow (but not
force) a line break to occur at this point.  The bar number
counter is not increased.  To force a line break see
@ref{Line breaking}.

@cindex manual bar lines
@cindex manual measure lines
@cindex bar lines, manual
@cindex measure lines, manual

This and other special bar lines may be inserted manually at any
point.  When they coincide with the end of a measure they replace
the simple bar line which would have been inserted there
automatically.  When they do not coincide with the end of a measure
the specified bar line is inserted at that point in the printed
output.

Note that manual bar lines are purely visual.  They do not affect
any of the properties that a normal bar line would affect, such as
measure numbers, accidentals, line breaks, etc.  They do not affect
the calculation and placement of subsequent automatic bar lines.
When a manual bar line is placed where a normal bar line already
exists, the effects of the original bar line are not altered.

Two types of simple bar lines and five types of double bar lines are
available for manual insertion:

@lilypond[quote,relative=1,verbatim]
f1 \bar "|"
f1 \bar "."
g1 \bar "||"
a1 \bar ".|"
b1 \bar ".."
c1 \bar "|.|"
d1 \bar "|."
e1
@end lilypond

@noindent
together with dotted and dashed bar lines:

@lilypond[quote,relative=1,verbatim]
f1 \bar ";"
g1 \bar "!"
a1
@end lilypond

@noindent
and nine types of repeat bar lines:

@lilypond[quote,relative=1,verbatim]
f1 \bar ".|:"
g1 \bar ":..:"
a1 \bar ":|.|:"
b1 \bar ":|.:"
c1 \bar ":.|.:"
d1 \bar "[|:"
e1 \bar ":|][|:"
f1 \bar ":|]"
g1 \bar ":|."
a1
@end lilypond

Additionally, a bar line can be printed as a simple tick:
@lilypond[quote,relative=1,verbatim]
f1 \bar "'" g1
@end lilypond
However, as such ticks are typically used in Gregorian chant, it is
preferable to use @code{\divisioMinima} there instead, described in
the section @ref{Divisiones} in Gregorian chant.

Lilypond supports kievan notation and provides a special kievan
bar line:
@lilypond[quote,relative=1,verbatim]
f1 \bar "k"
@end lilypond
Further details of this notation are explained in
@ref{Typesetting Kievan square notation}.

@cindex segno

For in-line segno signs, there are three types of bar lines which
differ in their behavior at line breaks:

@lilypond[quote,relative=2,verbatim]
c4 c c c
\bar "S"
c4 c c c \break
\bar "S"
c4 c c c
\bar "S-|"
c4 c c c \break
\bar "S-|"
c4 c c c
\bar "S-S"
c4 c c c \break
\bar "S-S"
c1
@end lilypond

@cindex repeats

Although the bar line types signifying repeats may be inserted
manually they do not in themselves cause LilyPond to recognize
a repeated section.  Such repeated sections are better entered
using the various repeat commands (see @ref{Repeats}), which
automatically print the appropriate bar lines.

In addition, you can specify @code{".|:-||"}, which is equivalent to
@code{".|:"} except at line breaks, where it gives a double bar
line at the end of the line and a start repeat at the beginning of
the next line.

@lilypond[quote,relative=2,verbatim]
c4 c c c
\bar ".|:-||"
c4 c c c \break
\bar ".|:-||"
c4 c c c
@end lilypond

For combinations of repeats with the segno sign, there are six different
variations:

@lilypond[quote,relative=2,verbatim]
c4 c c c
\bar ":|.S"
c4 c c c \break
\bar ":|.S"
c4 c c c
\bar ":|.S-S"
c4 c c c \break
\bar ":|.S-S"
c4 c c c
\bar "S.|:-S"
c4 c c c \break
\bar "S.|:-S"
c4 c c c
\bar "S.|:"
c4 c c c \break
\bar "S.|:"
c4 c c c
\bar ":|.S.|:"
c4 c c c \break
\bar ":|.S.|:"
c4 c c c
\bar ":|.S.|:-S"
c4 c c c \break
\bar ":|.S.|:-S"
c1
@end lilypond

Additionally there is an @code{\inStaffSegno} command which creates
a segno bar line in conjunction with an appropriate repeat bar line
when used with a @code{\repeat volta} command, see
@ref{Normal repeats}.

@funindex \defineBarLine
@funindex defineBarLine
@cindex bar lines, defining
@cindex defining bar lines

New bar line types can be defined with @code{\defineBarLine}:

@example
\defineBarLine @var{bartype} #'(@var{end} @var{begin} @var{span})
@end example

The @code{\defineBarline} variables can include the
@q{empty} string @code{""}, which is equivalent to an invisible
bar line being printed.  Or they can be set to @code{#f} which
prints no bar line at all.

After the definiton, the new bar line can be used by
@code{\bar} @var{bartype}.

There are currently ten bar line elements available:

@lilypond[quote,verbatim]
\defineBarLine ":" #'("" ":" "")
\defineBarLine "=" #'("=" "" "")
\defineBarLine "[" #'("" "[" "")
\defineBarLine "]" #'("]" "" "")

\new Staff {
  s1 \bar "|"
  s1 \bar "."
  s1 \bar "!"
  s1 \bar ";"
  s1 \bar ":"
  s1 \bar "k"
  s1 \bar "S"
  s1 \bar "="
  s1 \bar "["
  s1 \bar "]"
  s1 \bar ""
}
@end lilypond

The @code{"="} bar line provides the double span bar line, used
in combination with the segno sign.  Do not use it as a standalone
double thin bar line; here, @code{\bar} @var{"||"} is
preferred.

The @code{"-"} sign starts annotations to bar lines which
are useful to distinguish those with identical appearance
but different behavior at line breaks and/or different span bars.
The part following the @code{"-"} sign is not used for building up
the bar line.

@lilypond[quote,relative=2,verbatim]
\defineBarLine "||-dashedSpan" #'("||" "" "!!")

\new StaffGroup <<
  \new Staff {
    c1 \bar "||"
    c1 \bar "||-dashedSpan"
    c1
  }
  \new Staff {
    c1
    c1
    c1
  }
>>
@end lilypond

Furthermore, the space character @code{" "} serves as a placeholder
for defining span bars correctly aligned to the main bar lines:

@lilypond[quote,relative=2,verbatim]
\defineBarLine ":|.-wrong" #'(":|." "" "|.")
\defineBarLine ":|.-right" #'(":|." "" " |.")

\new StaffGroup <<
  \new Staff {
    c1 \bar ":|.-wrong"
    c1 \bar ":|.-right"
    c1
  }
  \new Staff {
    c1
    c1
    c1
  }
>>
@end lilypond

If additional elements are needed, LilyPond provides a simple
way to define them.  For more informations on modifying or adding
bar lines, see file @file{scm/bar-line.scm}.

In scores with many staves, a @code{\bar} command in one staff is
automatically applied to all staves.  The resulting bar lines are
connected between different staves of a @code{StaffGroup},
@code{PianoStaff}, or @code{GrandStaff}.

@lilypond[quote,relative=1,verbatim]
<<
  \new StaffGroup <<
    \new Staff {
      e4 d
      \bar "||"
      f4 e
    }
    \new Staff { \clef bass c4 g e g }
  >>
  \new Staff { \clef bass c2 c2 }
>>
@end lilypond


@cindex default bar lines, changing
@cindex bar lines, default, changing

@funindex whichBar
@funindex defaultBarType
@funindex \bar
@funindex bar
@funindex bartype

The command @samp{\bar @var{bartype}} is a shortcut for
@samp{\set Timing.whichBar = @var{bartype}}.  A bar line is
created whenever the @code{whichBar} property is set.

The default bar type used for automatically inserted bar lines is
@code{"|"}.  This may be changed at any time with
@samp{\set Timing.defaultBarType = @var{bartype}}.

@seealso
Notation Reference:
@ref{Line breaking},
@ref{Repeats},
@ref{Grouping staves}.

Installed Files:
@file{scm/bar-line.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{BarLine} (created at @code{Staff} level),
@rinternals{SpanBar} (across staves),
@rinternals{Timing_translator} (for Timing properties).


@node Bar numbers
@unnumberedsubsubsec Bar numbers

@cindex bar numbers
@cindex measure numbers
@cindex numbers, bar
@cindex numbers, measure

@funindex currentBarNumber

Bar numbers are typeset by default at the start of every line except
the first line.  The number itself is stored in the
@code{currentBarNumber} property, which is normally updated
automatically for every measure.  It may also be set manually:

@lilypond[verbatim,quote,relative=1]
c1 c c c
\break
\set Score.currentBarNumber = #50
c1 c c c
@end lilypond

@cindex bar numbers, regular spacing

@funindex barNumberVisibility
@funindex BarNumber

Bar numbers can be typeset at regular intervals instead of just at
the beginning of every line.  To do this the default behavior
must be overridden to permit bar numbers to be printed at places
other than the start of a line.  This is controlled by the
@code{break-visibility} property of @code{BarNumber}.  This takes
three values which may be set to @code{#t} or @code{#f} to specify
whether the corresponding bar number is visible or not.  The order
of the three values is @code{end of line visible}, @code{middle of
line visible}, @code{beginning of line visible}.  In the following
example bar numbers are printed at all possible places:

@lilypond[verbatim,quote,relative=1]
\override Score.BarNumber.break-visibility = ##(#t #t #t)
\set Score.currentBarNumber = #11
% Permit first bar number to be printed
\bar ""
c1 | c | c | c
\break
c1 | c | c | c
@end lilypond

@snippets
@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{printing-the-bar-number-for-the-first-measure.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{printing-bar-numbers-at-regular-intervals.ly}

@cindex measure number, format
@cindex bar number, format

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{printing-bar-numbers-inside-boxes-or-circles.ly}

@cindex bar numbers, with letters
@cindex bar numbers, with repeats

@lilypondfile[verbatim,quote,texidoc,doctitle]
{alternative-bar-numbering.ly}

@cindex bar number alignment

@lilypondfile[verbatim,quote,texidoc,doctitle]
{aligning-bar-numbers.ly}

@lilypondfile[verbatim,quote,ragged-right,texidoc,doctitle]
{removing-bar-numbers-from-a-score.ly}

@seealso
Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{BarNumber},
@rinternals{Bar_number_engraver}.

@cindex bar number collision
@cindex collision, bar number

@knownissues
Bar numbers may collide with the top of the @code{StaffGroup} bracket,
if there is one.  To solve this, the @code{padding} property of
@code{BarNumber} can be used to position the number correctly.  See
@rinternals{StaffGroup} and @rinternals{BarNumber} for more.


@node Bar and bar number checks
@unnumberedsubsubsec Bar and bar number checks

@cindex bar check
@cindex bar number check
@cindex measure check
@cindex measure number check

@funindex barCheckSynchronize
@funindex |

Bar checks help detect errors in the entered durations.  A bar check
may be entered using the bar symbol, @code{|}, at any place where a
bar line is expected to fall.  If bar check lines are encountered at
other places, a list of warnings is printed in the log file, showing
the line numbers and lines in which the bar checks failed.  In the
next example, the second bar check will signal an error.

@example
\time 3/4 c2 e4 | g2 |
@end example

Bar checks can also be used in lyrics:

@example
\lyricmode @{
  \time 2/4
  Twin -- kle | Twin -- kle |
@}
@end example

An incorrect duration can result in a completely garbled score,
especially if the score is polyphonic, so a good place to start
correcting input is by scanning for failed bar checks and
incorrect durations.

If successive bar checks are off by the same musical interval,
only the first warning message is displayed.  This allows the
warning to focus on the source of the timing error.


@funindex |
@funindex "|"

It is also possible to redefine the action taken when a bar check
or pipe symbol, @code{|}, is encountered in the input, so that
it does something other than a bar check.  This is done by
assigning a music expression to @code{"|"}.
In the following example @code{|} is set to insert a double bar
line wherever it appears in the input, rather than checking
for end of bar.

@lilypond[quote,verbatim]
"|" = \bar "||"
{
  c'2 c' |
  c'2 c'
  c'2 | c'
  c'2 c'
}
@end lilypond

@funindex \barNumberCheck
@funindex barNumberCheck

When copying large pieces of music, it can be helpful to check that
the LilyPond bar number corresponds to the original that you are
entering from.  This can be checked with @code{\barNumberCheck}, for
example,

@verbatim
\barNumberCheck #123
@end verbatim

@noindent
will print a warning if the @code{currentBarNumber} is not 123
when it is processed.

@seealso
Snippets:
@rlsr{Rhythms}.


@node Rehearsal marks
@unnumberedsubsubsec Rehearsal marks

@cindex rehearsal marks
@cindex mark, rehearsal

@funindex \mark
@funindex mark

To print a rehearsal mark, use the @code{\mark} command.

@lilypond[quote,verbatim,relative=2]
c1 \mark \default
c1 \mark \default
c1 \mark \default
c1 \mark \default
@end lilypond

@noindent
The mark is incremented automatically if you use @code{\mark
\default}, but you can also use an integer argument to set the
mark manually.  The value to use is stored in the property
@code{rehearsalMark}.

@lilypond[quote,verbatim,relative=2]
c1 \mark \default
c1 \mark \default
c1 \mark #8
c1 \mark \default
c1 \mark \default
@end lilypond

@noindent
The letter@tie{}@q{I} is skipped in accordance with engraving
traditions.  If you wish to include the letter @q{I}, then use one
of the following commands, depending on which style of rehearsal mark
you want (letters only, letters in a hollow box, or letters in a
hollow circle).

@example
\set Score.markFormatter = #format-mark-alphabet
\set Score.markFormatter = #format-mark-box-alphabet
\set Score.markFormatter = #format-mark-circle-alphabet
@end example

@lilypond[quote,verbatim,relative=2]
\set Score.markFormatter = #format-mark-box-alphabet
c1 \mark \default
c1 \mark \default
c1 \mark #8
c1 \mark \default
c1 \mark \default
@end lilypond

@cindex rehearsal mark format
@cindex rehearsal mark style
@cindex style, rehearsal mark
@cindex format, rehearsal mark
@cindex mark, rehearsal, style
@cindex mark, rehearsal, format
@cindex rehearsal mark, manual
@cindex mark, rehearsal, manual
@cindex custom rehearsal mark
@cindex manual rehearsal mark

The style is defined by the property @code{markFormatter}.  It is
a function taking the current mark (an integer) and the current
context as argument.  It should return a markup object.  In the
following example, @code{markFormatter} is set to a pre-defined
procedure.  After a few measures, it is set to a procedure that
produces a boxed number.

@lilypond[quote,verbatim,relative=2]
\set Score.markFormatter = #format-mark-numbers
c1 \mark \default
c1 \mark \default
\set Score.markFormatter = #format-mark-box-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-numbers
c1 \mark \default
\set Score.markFormatter = #format-mark-circle-letters
c1
@end lilypond

The file @file{scm/translation-functions.scm} contains the
definitions of @code{format-mark-numbers} (the default format),
@code{format-mark-box-numbers}, @code{format-mark-letters} and
@code{format-mark-box-letters}.  These can be used as inspiration
for other formatting functions.

You may use @code{format-mark-barnumbers},
@code{format-mark-box-barnumbers}, and
@code{format-mark-circle-barnumbers} to get bar numbers instead of
incremented numbers or letters.

Other styles of rehearsal mark can be specified manually:

@example
\mark "A1"
@end example

@noindent
Note that @code{Score.markFormatter} does not affect marks specified
in this manner.  However, it is possible to apply a @code{\markup} to the
string.

@example
\mark \markup@{ \box A1 @}
@end example

@cindex segno
@cindex coda
@cindex D.S. al Fine
@cindex fermata
@cindex music glyphs
@cindex glyphs, music

@funindex \musicglyph
@funindex musicglyph

Music glyphs (such as the segno sign) may be printed inside a
@code{\mark}

@lilypond[quote,verbatim,relative=1]
c1 \mark \markup { \musicglyph #"scripts.segno" }
c1 \mark \markup { \musicglyph #"scripts.coda" }
c1 \mark \markup { \musicglyph #"scripts.ufermata" }
c1
@end lilypond

@noindent
See @ref{The Feta font}, for a list of symbols which may be
printed with @code{\musicglyph}.

For common tweaks to the positioning of rehearsal marks, see
@ref{Formatting text}.  For more precise control, see
@code{break-alignable-interface} in @ref{Aligning objects}.

The file @file{scm/translation-functions.scm} contains
the definitions of @code{format-mark-numbers} and
@code{format-mark-letters}.  They can be used as inspiration for
other formatting functions.

@seealso
Notation Reference:
@ref{The Feta font},
@ref{Formatting text},
@ref{Aligning objects}.

Installed Files:
@file{scm/translation-functions.scm}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{MarkEvent},
@rinternals{Mark_engraver},
@rinternals{RehearsalMark}.


@node Special rhythmic concerns
@subsection Special rhythmic concerns


@menu
* Grace notes::
* Aligning to cadenzas::
* Time administration::
@end menu

@node Grace notes
@unnumberedsubsubsec Grace notes

@cindex ornaments
@cindex grace notes
@cindex appoggiatura
@cindex acciaccatura

@funindex \grace
@funindex \slashedGrace
@funindex \acciaccatura
@funindex \appoggiatura

Grace notes are musical ornaments, printed in a smaller font, that take
up no additional logical time in a measure.

@lilypond[quote,relative=2,verbatim]
c4 \grace b16 a4(
\grace { b16 c16 } a2)
@end lilypond

There are three other types of grace notes possible; the
@emph{acciaccatura} -- an unmeasured grace note indicated by a slurred
note with a slashed stem -- and the @emph{appoggiatura}, which takes a
fixed fraction of the main note it is attached to and prints without the
slash.  It is also possible to write a grace note with a slashed stem,
like the @emph{acciaccatura} but without the slur, so as to place it
between notes that are slurred themselves, using the
@code{\slashedGrace} function.

@lilypond[quote,relative=2,verbatim]
\acciaccatura d8 c4
\appoggiatura e8 d4
\acciaccatura { g16 f } e2
\slashedGrace a,8 g4
\slashedGrace b16 a4(
\slashedGrace b8 a2)
@end lilypond

The placement of grace notes is synchronized between different staves.
In the following example, there are two sixteenth grace notes for every
eighth grace note

@lilypond[quote,relative=2,verbatim]
<<
  \new Staff { e2 \grace { c16 d e f } e2 }
  \new Staff { c2 \grace { g8 b } c2 }
>>
@end lilypond

@cindex grace notes, following

@funindex \afterGrace
@funindex afterGrace

If you want to end a note with a grace, use the @code{\afterGrace}
command.  It takes two arguments: the main note, and the grace
notes following the main note.

@lilypond[quote,verbatim,relative=2]
c1 \afterGrace d1 { c16[ d] } c1
@end lilypond

This will put the grace notes after a space lasting 3/4 of the
length of the main note.  The default fraction 3/4 can be changed by
setting @code{afterGraceFraction}.  The following example shows
the results from setting the space at the default,  at 15/16, and
finally at 1/2 of the main note.

@lilypond[quote,verbatim,relative=2]
<<
  \new Staff {
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 15 16))
    c1 \afterGrace d1 { c16[ d] } c1
  }
  \new Staff {
    #(define afterGraceFraction (cons 1 2))
    c1 \afterGrace d1 { c16[ d] } c1
  }
>>
@end lilypond

The space between the main note and the grace note may also be
specified using spacers.  The following example places the grace
note after a space lasting 7/8 of the main note.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  <<
    { d1^\trill_( }
    { s2 s4. \grace { c16 d } }
  >>
  c1)
}
@end lilypond

@cindex tweaking grace notes
@cindex grace notes, tweaking
@cindex grace notes, changing layout settings

A @code{\grace} music expression will introduce special
typesetting settings, for example, to produce smaller type, and
set directions.  Hence, when introducing layout tweaks to
override the special settings, they should be placed inside
the grace expression.  The overrides should also be reverted
inside the grace expression.  Here, the grace note's default stem
direction is overridden and then reverted.

@lilypond[quote,verbatim,relative=2]
\new Voice {
  \acciaccatura {
    \stemDown
    f16->
    \stemNeutral
  }
  g4 e c2
}
@end lilypond


@cindex stem, with slash


@snippets

@lilypondfile[verbatim,quote,texidoc,doctitle]
{using-grace-note-slashes-with-normal-heads.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{tweaking-grace-layout-within-music.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{redefining-grace-note-global-defaults.ly}

@lilypondfile[verbatim,quote,texidoc,doctitle]
{positioning-grace-notes-with-floating-space.ly}

@seealso
Music Glossary:
@rglos{grace notes},
@rglos{acciaccatura},
@rglos{appoggiatura}.

Notation Reference:
@ref{Scaling durations},
@ref{Manual beams}.

Installed Files:
@file{ly/grace-init.ly}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{GraceMusic},
@rinternals{Grace_beam_engraver},
@rinternals{Grace_auto_beam_engraver},
@rinternals{Grace_engraver},
@rinternals{Grace_spacing_engraver}.


@knownissues
@cindex acciaccatura, multi-note
@cindex multi-note acciaccatura
@cindex grace-note synchronization

A multi-note beamed @i{acciaccatura} is printed without a slash,
and looks exactly the same as a multi-note beamed
@i{appoggiatura}.

@c TODO Add link to LSR snippet to add slash when available

Grace note synchronization can also lead to surprises.  Staff
notation, such as key signatures, bar lines, etc., are also
synchronized.  Take care when you mix staves with grace notes and
staves without, for example,

@lilypond[quote,relative=2,verbatim]
<<
  \new Staff { e4 \bar ".|:" \grace c16 d2. }
  \new Staff { c4 \bar ".|:" d2. }
>>
@end lilypond

@noindent
This can be remedied by inserting grace skips of the corresponding
durations in the other staves.  For the above example

@lilypond[quote,relative=2,verbatim]
<<
  \new Staff { e4 \bar ".|:" \grace c16 d2. }
  \new Staff { c4 \bar ".|:" \grace s16 d2. }
>>
@end lilypond

The use of grace notes within voice contexts confuses the way the voice
is typeset. This can be overcome by inserting a rest or note between the
voice command and the grace note.

@lilypond[quote,verbatim]
accMusic = {
  \acciaccatura { f8 } e8 r8 \acciaccatura { f8 } e8 r4
}

\new Staff {
  <<
    \new Voice {
      \relative c'' {
        r8 r8 \voiceOne \accMusic \oneVoice r8 |
        r8 \voiceOne r8 \accMusic \oneVoice r8 |
      }
    }
    \new Voice {
      \relative c' {
        s8 s8 \voiceTwo \accMusic \oneVoice s8 |
        s8 \voiceTwo r8 \accMusic \oneVoice s8 |
      }
    }
  >>
}
@end lilypond

Grace sections should only be used within sequential music expressions.
Nesting or juxtaposing grace sections is not supported, and might
produce crashes or other errors.

Each grace note in MIDI output has a length of 1/4 of its actual
duration.  If the combined length of the grace notes is greater than the
length of the preceding note a @qq{@code{Going back in MIDI time}}
error will be generated.  Either make the grace notes shorter in
duration, for example:

@example
c'8 \acciaccatura @{ c'8[ d' e' f' g'] @}
@end example

becomes:

@example
c'8 \acciaccatura @{ c'16[ d' e' f' g'] @}
@end example

Or explicitly change the musical duration:

@example
c'8 \acciaccatura @{ \scaleDurations 1/2 @{ c'8[ d' e' f' g'] @} @}
@end example

See @ref{Scaling durations}.


@node Aligning to cadenzas
@unnumberedsubsubsec Aligning to cadenzas

@cindex cadenza
@cindex cadenza, aligning to
@cindex aligning to cadenza

In an orchestral context, cadenzas present a special problem: when
constructing a score that includes a measured cadenza or other solo
passage, all other instruments should skip just as many notes as the
length of the cadenza, otherwise they will start too soon or too late.

One solution to this problem is to use the functions
@code{mmrest-of-length} and @code{skip-of-length}.  These Scheme
functions take a defined piece of music as an argument and generate a
multi-measure rest or @code{\skip} exactly as long as the piece.

@lilypond[verbatim,quote]
MyCadenza = \relative c' {
  c4 d8 e f g g4
  f2 g4 g
}

\new GrandStaff <<
  \new Staff {
    \MyCadenza c'1
    \MyCadenza c'1
  }
  \new Staff {
    #(mmrest-of-length MyCadenza)
    c'1
    #(skip-of-length MyCadenza)
    c'1
  }
>>
@end lilypond

@seealso
Music Glossary:
@rglos{cadenza}.

Snippets:
@rlsr{Rhythms}.


@node Time administration
@unnumberedsubsubsec Time administration

@cindex time administration
@cindex timing (within the score)
@cindex music, unmetered
@cindex unmetered music

@funindex currentBarNumber
@funindex measurePosition
@funindex measureLength

Time is administered by the @code{Timing_translator}, which by
default is to be found in the @code{Score} context.  An alias,
@code{Timing}, is added to the context in which the
@code{Timing_translator} is placed.  To ensure that the
@code{Timing} alias is available, you may need to explicitly
instantiate the containing context (such as @code{Voice} or
@code{Staff}).

The following properties of @code{Timing} are used
to keep track of timing within the score.

@cindex bar number
@cindex measure number

@table @code
@item currentBarNumber
The current measure number.  For an example showing the
use of this property see @ref{Bar numbers}.

@item measureLength
The length of the measures in the current time signature.  For a
4/4 time this is@tie{}1, and for 6/8 it is 3/4.  Its value
determines when bar lines are inserted and how automatic beams
should be generated.

@item measurePosition
The point within the measure where we currently are.  This
quantity is reset by subtracting @code{measureLength} whenever
@code{measureLength} is reached or exceeded.  When that happens,
@code{currentBarNumber} is incremented.

@item timing
If set to true, the above variables are updated for every time
step.  When set to false, the engraver stays in the current
measure indefinitely.

@end table

Timing can be changed by setting any of these variables
explicitly.  In the next example, the default 4/4 time
signature is printed, but @code{measureLength} is set to 5/4.
At 4/8 through the third measure, the @code{measurePosition} is
advanced by 1/8 to 5/8, shortening that bar by 1/8.
The next bar line then falls at 9/8 rather than 5/4.

@lilypond[quote,verbatim]
\new Voice \relative c' {
  \set Timing.measureLength = #(ly:make-moment 5/4)
  c1 c4 |
  c1 c4 |
  c4 c
  \set Timing.measurePosition = #(ly:make-moment 5/8)
  b4 b b8 |
  c4 c1 |
}
@end lilypond

@noindent
As the example illustrates, @code{ly:make-moment n m} constructs a
duration of n/m of a whole note.  For example,
@code{ly:make-moment 1 8} is an eighth note duration and
@code{ly:make-moment 7 16} is the duration of seven sixteenths
notes.

@seealso
Notation Reference:
@ref{Bar numbers},
@ref{Unmetered music}.

Snippets:
@rlsr{Rhythms}.

Internals Reference:
@rinternals{Timing_translator},
@rinternals{Score}.
